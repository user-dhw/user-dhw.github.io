<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-24T02:41:35.257Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>dinghw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于原生实现拖拽排序</title>
    <link href="http://example.com/2022/11/24/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/11/24/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</id>
    <published>2022-11-24T01:35:56.000Z</published>
    <updated>2022-11-24T02:41:35.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>&#96;</p><!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta http-equiv="X-UA-Compatible" content="IE=edge">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>Document</title></head><style>  .list-item {    width: 300px;    height: 30px;    margin: 20px;    text-align: center;    line-height: 30px;    border-radius: 5px;    background: rgba(32, 138, 191, 0.776);  }  .list-item.moving {    background: transparent;    color: transparent;    border: 1px dashed #ccc;  }</style><body>  <div class="list">    <div draggable="true" class="list-item">1</div>    <div draggable="true" class="list-item">2</div>    <div draggable="true" class="list-item">3</div>    <div draggable="true" class="list-item">4</div>    <div draggable="true" class="list-item">5</div>  </div>  <script>    const list = document.querySelector('.list');    let node    list.ondragstart = function (e) {      setTimeout(() => {        e.target.classList.add('moving');      })      node = e.target;      e.dataTransfer.effectAllowed = 'move';    }    list.ondragover = function (e) {      e.preventDefault();    }    list.ondragenter = function (e) {      e.preventDefault();      if (e.target == list || e.target == node) {        return      }      const children = Array.from(list.children)      const nodeIndex = children.indexOf(node)      const targetIndex = children.indexOf(e.target)      if (nodeIndex < targetIndex) {        // 从上往下拖动        list.insertBefore(node, e.target.nextElementSibling)      } else {        // 从下往上拖动        list.insertBefore(node, e.target)      }    }    list.ondragend = (e) => {      e.target.classList.remove('moving');    }  </script></body></html>`<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js">样式：<br>  .<span class="hljs-property">list</span>-item &#123;<br>    <span class="hljs-attr">width</span>: 300px;<br>    <span class="hljs-attr">height</span>: 30px;<br>    <span class="hljs-attr">margin</span>: 20px;<br>    text-<span class="hljs-attr">align</span>: center;<br>    line-<span class="hljs-attr">height</span>: 30px;<br>    border-<span class="hljs-attr">radius</span>: 5px;<br>    <span class="hljs-attr">background</span>: <span class="hljs-title function_">rgba</span>(<span class="hljs-number">32</span>, <span class="hljs-number">138</span>, <span class="hljs-number">191</span>, <span class="hljs-number">0.776</span>);<br>  &#125;<br>  .<span class="hljs-property">list</span>-item.<span class="hljs-property">moving</span> &#123;<br>    <span class="hljs-attr">background</span>: transparent;<br>    <span class="hljs-attr">color</span>: transparent;<br>    <span class="hljs-attr">border</span>: 1px dashed #ccc;<br>  &#125;<br>内容：<br>  &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &lt;/div&gt;<br>js：<br>    <span class="hljs-keyword">const</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.list&#x27;</span>);<br>    <span class="hljs-keyword">let</span> node<br>    list.<span class="hljs-property">ondragstart</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;moving&#x27;</span>);<br>      &#125;)<br>      node = e.<span class="hljs-property">target</span>;<br>      e.<span class="hljs-property">dataTransfer</span>.<span class="hljs-property">effectAllowed</span> = <span class="hljs-string">&#x27;move&#x27;</span>;<br>    &#125;<br>    list.<span class="hljs-property">ondragover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      e.<span class="hljs-title function_">preventDefault</span>();<br>    &#125;<br>    list.<span class="hljs-property">ondragenter</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      e.<span class="hljs-title function_">preventDefault</span>();<br>      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span> == list || e.<span class="hljs-property">target</span> == node) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-keyword">const</span> children = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(list.<span class="hljs-property">children</span>)<br>      <span class="hljs-keyword">const</span> nodeIndex = children.<span class="hljs-title function_">indexOf</span>(node)<br>      <span class="hljs-keyword">const</span> targetIndex = children.<span class="hljs-title function_">indexOf</span>(e.<span class="hljs-property">target</span>)<br>      <span class="hljs-keyword">if</span> (nodeIndex &lt; targetIndex) &#123;<br>        <span class="hljs-comment">// 从上往下拖动</span><br>        list.<span class="hljs-title function_">insertBefore</span>(node, e.<span class="hljs-property">target</span>.<span class="hljs-property">nextElementSibling</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 从下往上拖动</span><br>        list.<span class="hljs-title function_">insertBefore</span>(node, e.<span class="hljs-property">target</span>)<br>      &#125;<br>    &#125;<br>    list.<span class="hljs-property">ondragend</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>      e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;moving&#x27;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;&amp;#96;&lt;/p&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue中router和route的区别</title>
    <link href="http://example.com/2022/11/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2022/11/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2022-11-20T03:35:37.000Z</published>
    <updated>2022-11-24T01:19:56.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="router"><a href="#router" class="headerlink" title="router"></a><strong>router</strong></h2><p>router 是 VueRouter 的实例对象,也是一个全局的路由对象，里面有很多的属性和方法比如：</p><h4 id="router-push："><a href="#router-push：" class="headerlink" title="router.push："></a>router.push：</h4><p>跳转链接就可以用  <code>this.$router.push，和router-link跳转一样</code></p><h4 id="router-replace"><a href="#router-replace" class="headerlink" title="router.replace():"></a>router.replace():</h4><p>跟 router.push 作用是一样的，但是它不会向 history 添加新记录，而是跟它的方法名一样替换掉当前的 history 记录.</p><h4 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n):"></a>router.go(n):</h4><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，window.history.Go(n)</p><h2 id="route"><a href="#route" class="headerlink" title="route"></a><strong>route</strong></h2><p>route 是当前正在跳转的路由对象，可以从 route 里面获取 hash，name ，path，query，params， fullPath 等属性方法比如接受参数时使用<br><strong>this.$route.query.参数名 —- this.route.params.参数名</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;router&quot;&gt;&lt;a href=&quot;#router&quot; class=&quot;headerlink&quot; title=&quot;router&quot;&gt;&lt;/a&gt;&lt;strong&gt;router&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;router 是 VueRouter 的实例对象,也是一个全局的路由对象，</summary>
      
    
    
    
    
  </entry>
  
</feed>
