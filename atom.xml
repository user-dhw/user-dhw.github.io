<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-13T09:28:27.637Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>dinghw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://example.com/2023/06/01/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2023/06/01/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2023-06-01T09:02:37.000Z</published>
    <updated>2023-06-13T09:28:27.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><p>1、提升首屏的加载速度，是前端性能优化中最重要的环节，这里笔者梳理出一些常规且有效的首屏优化建议。</p><p>2、目标： 通过对比优化前后的性能变化，来验证方案的有效性，了解并掌握其原理。</p><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>SPA 项目，一个路由对应一个页面，如果不做处理，项目打包后，会把所有页面打包成一个文件，当用户打开首页时，会一次性加载所有的资源，造成首页加载很慢，降低用户体验。</p><p>将路由全部改成懒加载：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const routes = [<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br><span class="hljs-comment">// 路由级代码分解</span><br><span class="hljs-comment">// 这将为该路由生成一个单独的块(home.[hash].js)</span><br><span class="hljs-comment">// 它在访问路由时是懒加载的。</span><br>component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> import(<span class="hljs-regexp">/_ webpackChunkName: &quot;home&quot; _/</span> <span class="hljs-string">&#x27;../views/home.vue&#x27;</span>),<br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/test&#x27;</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> import(<span class="hljs-regexp">/_ webpackChunkName: &quot;test&quot; _/</span> <span class="hljs-string">&#x27;../views/test.vue&#x27;</span>),<br>&#125;,<br>];<br></code></pre></td></tr></table></figure><p>重新打包后的 home.js 和 app.js 的文件大小会发生变化，通过路由懒加载，能将项目的首页资源大幅度压缩，减少首页白屏时间</p><h2 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h2><p>除了路由的懒加载外，组件的懒加载在很多场景下也有重要的作用。</p><p>举个 🌰：</p><p>home 页面 和 about 页面，都引入了 dialogInfo 弹框组件，该弹框不是一进入页面就加载，而是需要用户手动触发后才展示出来。</p><p>home 页面示例：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;homeView&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>home 页面<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = !dialogVisible&quot;</span>&gt;</span>打开弹框<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dialogInfo</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;dialogVisible&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> dialogInfo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/dialogInfo&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery">   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;homeView&#x27;</span>,</span><br><span class="language-xquery">    components: &#123;</span><br><span class="language-xquery">      dialogInfo,</span><br><span class="language-xquery">    &#125;</span><span class="language-xml">,</span><br><span class="language-xml">  &#125;;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>项目打包后，发现 home.js 和 about.js 均包括了该弹框组件的代码（在 dist 文件中搜索 dialogInfo 弹框组件）。</p><p>当用户打开 home 页时，会一次性加载该页面所有的资源，我们期望的是用户触发按钮后，再加载该弹框组件的资源，这种场景下，就很适合用懒加载的方式引入。</p><p>弹框组件懒加载：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">dialogInfo</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;dialogInfo&quot; */</span> <span class="hljs-string">&#x27;@/components/dialogInfo&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery"> <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;homeView&#x27;</span>,</span><br><span class="language-xquery">  components: &#123;</span><br><span class="language-xquery">    dialogInfo</span><br><span class="language-xquery">  &#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>重新打包后，home.js 和 about.js 中没有了弹框组件的代码，该组件被独立打包成 dialogInfo.js，当用户点击按钮时，才会去加载 dialogInfo.js 和 dialogInfo.css。</p><p>最终，使用组件路由懒后，该项目的首页资源进一步减少。</p><p>组件懒加载的使用场景</p><p>有时资源拆分的过细也不好，可能会造成浏览器 http 请求的增多。</p><p>总结出三种适合组件懒加载的场景：</p><p>1）该页面的 JS 文件体积大，导致页面打开慢，可以通过组件懒加载进行资源拆分，利用浏览器并行下载资源，提升下载速度（比如首页）。</p><p>2）该组件不是一进入页面就展示，需要一定条件下才触发（比如弹框组件）。</p><p>3）该组件复用性高，很多页面都有引入，利用组件懒加载抽离出该组件，一方面可以很好利用缓存，同时也可以减少页面的 JS 文件大小（比如表格组件、图形组件等）。</p><h2 id="长列表虚拟滚动"><a href="#长列表虚拟滚动" class="headerlink" title="长列表虚拟滚动"></a>长列表虚拟滚动</h2><p>首页中有需要渲染长列表的场景，当渲染条数过多时，所需要的渲染时间会很长，滚动时还会造成页面卡顿，整体体验非常不好。</p><p>虚拟滚动——指的是只渲染可视区域的列表项，非可见区域的不渲染，在滚动时动态更新可视区域，该方案在优化大量数据渲染时效果是很明显的。</p><p>虚拟滚动基本原理：</p><p>计算出 totalHeight 列表总高度，并在触发时滚动事件时根据 scrollTop 值不断更新 startIndex 以及 endIndex ，以此从列表数据 listData 中截取对应元素。</p><p>虚拟滚动插件</p><p>虚拟滚动的插件有很多，比如 vue-virtual-scroller、vue-virtual-scroll-list、react-tiny-virtual-list、react-virtualized 等。</p><p>这里简单介绍 vue-virtual-scroller 的使用：</p><p>&#x2F;&#x2F; 安装插件<br>npm install vue-virtual-scroller</p><p>&#x2F;&#x2F; main.js<br>import VueVirtualScroller from ‘vue-virtual-scroller’<br>import ‘vue-virtual-scroller&#x2F;dist&#x2F;vue-virtual-scroller.css’</p><p>Vue.use(VueVirtualScroller)</p><p>&#x2F;&#x2F; 使用</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RecycleScroller</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scroller&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:items</span>=<span class="hljs-string">&quot;list&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:item-size</span>=<span class="hljs-string">&quot;32&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">key-field</span>=<span class="hljs-string">&quot;id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.name</span> &#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">RecycleScroller</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>该插件主要有 RecycleScroller.vue、DynamicScroller.vue 这两个组件，其中 RecycleScroller 需要 item 的高度为静态的，也就是列表每个 item 的高度都是一致的，而 DynamicScroller 可以兼容 item 的高度为动态的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端性能优化&quot;&gt;&lt;a href=&quot;#前端性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端性能优化&quot;&gt;&lt;/a&gt;前端性能优化&lt;/h2&gt;&lt;p&gt;1、提升首屏的加载速度，是前端性能优化中最重要的环节，这里笔者梳理出一些常规且有效的首屏优化建议。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="vue基础" scheme="http://example.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>基于element封装el-upload文件上传</title>
    <link href="http://example.com/2023/04/13/%E5%9F%BA%E4%BA%8Eelement%E5%B0%81%E8%A3%85el-upload%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2023/04/13/%E5%9F%BA%E4%BA%8Eelement%E5%B0%81%E8%A3%85el-upload%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2023-04-13T05:36:52.000Z</published>
    <updated>2023-04-27T05:39:33.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不多墨迹直接上代码"><a href="#不多墨迹直接上代码" class="headerlink" title="不多墨迹直接上代码"></a>不多墨迹直接上代码</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;upload-file&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:action</span>=<span class="hljs-string">&quot;uploadFileUrl&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:before-upload</span>=<span class="hljs-string">&quot;handleBeforeUpload&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:file-list</span>=<span class="hljs-string">&quot;fileList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:limit</span>=<span class="hljs-string">&quot;limit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:on-error</span>=<span class="hljs-string">&quot;handleUploadError&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:on-exceed</span>=<span class="hljs-string">&quot;handleExceed&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:on-success</span>=<span class="hljs-string">&quot;handleUploadSuccess&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:show-file-list</span>=<span class="hljs-string">&quot;false&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:headers</span>=<span class="hljs-string">&quot;headers&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;upload-file-uploader&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;upload&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 上传按钮 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>选取文件<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 上传提示 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-upload__tip&quot;</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;tip&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;showTip&quot;</span>&gt;</span></span><br><span class="language-xml">        请上传</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;fileSize&quot;</span>&gt;</span> 大小不超过 <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #f56c6c&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">fileSize</span> &#125;&#125;</span><span class="language-xml">MB<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;fileType&quot;</span>&gt;</span> 格式为 <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #f56c6c&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">fileType.join</span>(<span class="hljs-name">&quot;/&quot;</span>) &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">        的文件</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 文件列表 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;upload-file-list el-upload-list el-upload-list--text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;el-fade-in-linear&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;file.uid&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-upload-list__item ele-upload-list__item-content&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(file, index) in fileList&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-link</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;file.url&quot;</span> <span class="hljs-attr">:underline</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-document&quot;</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">getFileName</span>(<span class="hljs-name">file.name</span>) &#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ele-upload-list__item-content-action&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-link</span> <span class="hljs-attr">:underline</span>=<span class="hljs-string">&quot;false&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleDelete(index)&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; getToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/auth&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;FileUpload&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 值</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">value</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>, <span class="hljs-title class_">Array</span>],</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 数量限制</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">limit</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">default</span>: <span class="hljs-number">5</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 大小限制(MB)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">fileSize</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">default</span>: <span class="hljs-number">5</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 文件类型, 例如[&#x27;png&#x27;, &#x27;jpg&#x27;, &#x27;jpeg&#x27;]</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">fileType</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> [<span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;xls&quot;</span>, <span class="hljs-string">&quot;ppt&quot;</span>, <span class="hljs-string">&quot;txt&quot;</span>, <span class="hljs-string">&quot;pdf&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 是否显示提示</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">isShowTip</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">default</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">uploadFileUrl</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span> + <span class="hljs-string">&quot;/file/upload&quot;</span>, <span class="hljs-comment">// 上传的图片服务器地址</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">headers</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + <span class="hljs-title function_">getToken</span>(),</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">fileList</span>: [],</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">watch</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">value</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">handler</span>(<span class="hljs-params">val</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (val) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">let</span> temp = <span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 首先将值转为数组</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">const</span> list = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(val) ? val : <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 然后将数组转为对象数组</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileList</span> = list.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> item === <span class="hljs-string">&quot;string&quot;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">              item = &#123; <span class="hljs-attr">name</span>: item, <span class="hljs-attr">url</span>: item &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            item.<span class="hljs-property">uid</span> = item.<span class="hljs-property">uid</span> || <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() + temp++;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> item;</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileList</span> = [];</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> [];</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 是否显示提示</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">showTip</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShowTip</span> &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">fileType</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileSize</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 上传前校检格式和大小</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">handleBeforeUpload</span>(<span class="hljs-params">file</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 校检文件类型</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">fileType</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> fileExtension = <span class="hljs-string">&quot;&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (file.<span class="hljs-property">name</span>.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          fileExtension = file.<span class="hljs-property">name</span>.<span class="hljs-title function_">slice</span>(file.<span class="hljs-property">name</span>.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> isTypeOk = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileType</span>.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">type</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">if</span> (file.<span class="hljs-property">type</span>.<span class="hljs-title function_">indexOf</span>(type) &gt; -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">if</span> (fileExtension &amp;&amp; fileExtension.<span class="hljs-title function_">indexOf</span>(type) &gt; -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (!isTypeOk) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`文件格式不正确, 请上传<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.fileType.join(<span class="hljs-string">&quot;/&quot;</span>)&#125;</span>格式文件!`</span>);</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 校检文件大小</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">fileSize</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> isLt = file.<span class="hljs-property">size</span> / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileSize</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (!isLt) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`上传文件大小不能超过 <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.fileSize&#125;</span> MB!`</span>);</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 文件个数超出</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">handleExceed</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`上传文件数量不能超过 <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.limit&#125;</span> 个!`</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 上传失败</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">handleUploadError</span>(<span class="hljs-params">err</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;上传失败, 请重试&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 上传成功回调</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">handleUploadSuccess</span>(<span class="hljs-params">res, file</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&quot;上传成功&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileList</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">url</span>, <span class="hljs-attr">url</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">url</span> &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;input&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">listToString</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fileList</span>));</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 删除文件</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">handleDelete</span>(<span class="hljs-params">index</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileList</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;input&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">listToString</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fileList</span>));</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 获取文件名称</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">getFileName</span>(<span class="hljs-params">name</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (name.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;/&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> name.<span class="hljs-title function_">slice</span>(name.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;/&quot;</span>) + <span class="hljs-number">1</span>).<span class="hljs-title function_">toLowerCase</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 对象转成指定字符串分隔</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">listToString</span>(<span class="hljs-params">list, separator</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> strs = <span class="hljs-string">&quot;&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      separator = separator || <span class="hljs-string">&quot;,&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> list) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        strs += list[i].<span class="hljs-property">url</span> + separator;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> strs != <span class="hljs-string">&#x27;&#x27;</span> ? strs.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, strs.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) : <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.upload-file-uploader</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.upload-file-list</span> <span class="hljs-selector-class">.el-upload-list__item</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e4e7ed</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">2</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.upload-file-list</span> <span class="hljs-selector-class">.ele-upload-list__item-content</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">justify-content</span>: space-between;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: inherit;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.ele-upload-list__item-content-action</span> <span class="hljs-selector-class">.el-link</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;不多墨迹直接上代码&quot;&gt;&lt;a href=&quot;#不多墨迹直接上代码&quot; class=&quot;headerlink&quot; title=&quot;不多墨迹直接上代码&quot;&gt;&lt;/a&gt;不多墨迹直接上代码&lt;/h2&gt;&lt;figure class=&quot;highlight handlebars&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>v-model是如何实现的</title>
    <link href="http://example.com/2023/04/12/v-model%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
    <id>http://example.com/2023/04/12/v-model%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84/</id>
    <published>2023-04-12T01:00:56.000Z</published>
    <updated>2023-04-27T05:40:37.192Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理:"></a>实现原理:</h3><p>v-model 只不过是一个语法糖而已,真正的实现靠的还是:<br>1、v-bind:绑定响应式数据<br>2、触发 oninput 事件并传递数据，并且在触发 input 事件的时候去动态把 message 设置为目标值</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gams">&lt;input v-<span class="hljs-keyword">model</span>=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>等同于<br>&lt;input<br>v-bind:value=<span class="hljs-string">&quot;message&quot;</span><br>v-on:input=<span class="hljs-string">&quot;message=$event.target.value&quot;</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$event</span> 指代当前触发的事件对象;</span><br><span class="hljs-meta"><span class="hljs-keyword">$event</span>.target 指代当前触发的事件对象的 dom;</span><br><span class="hljs-meta"><span class="hljs-keyword">$event</span>.target.value 就是当前 dom 的 value 值;</span><br>在@input 方法中，value =&gt; message;<br>在:value 中,message =&gt; value;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理:&quot;&gt;&lt;/a&gt;实现原理:&lt;/h3&gt;&lt;p&gt;v-model 只不过是一个语法糖而已,真正的实现靠的还是:&lt;br&gt;1、v-bind:绑定响应式数据&lt;br&gt;2、触发 o</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>el-select 数据下拉懒加载</title>
    <link href="http://example.com/2023/03/23/el-select-%E6%95%B0%E6%8D%AE%E4%B8%8B%E6%8B%89%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2023/03/23/el-select-%E6%95%B0%E6%8D%AE%E4%B8%8B%E6%8B%89%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2023-03-23T11:53:53.000Z</published>
    <updated>2023-04-27T05:40:08.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="el-select-数据下拉懒加载"><a href="#el-select-数据下拉懒加载" class="headerlink" title="el-select 数据下拉懒加载"></a>el-select 数据下拉懒加载</h2><ol><li>下拉框需要分页查询，需要加入自定义指令，下拉到底部时触发下一页的查询</li></ol><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&lt;el-<span class="hljs-keyword">select</span> v-model=<span class="hljs-string">&quot;value&quot;</span><br>    placeholder=<span class="hljs-string">&quot;请选择&quot;</span><br>    v-loadMore=<span class="hljs-string">&quot;loadMore&quot;</span>&gt;<br>    &lt;el-<span class="hljs-keyword">option</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in options&quot;</span><br>      :<span class="hljs-keyword">key</span>=<span class="hljs-string">&quot;item.value&quot;</span><br>      :label=<span class="hljs-string">&quot;item.label&quot;</span><br>      :<span class="hljs-keyword">value</span>=<span class="hljs-string">&quot;item.value&quot;</span>&gt;<br>    &lt;/el-<span class="hljs-keyword">option</span>&gt;<br>  &lt;/el-<span class="hljs-keyword">select</span>&gt;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>自定义指令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">loadMore</span>: &#123;<br>    <span class="hljs-title function_">bind</span>(<span class="hljs-params">el, binding</span>) &#123;<br>      <span class="hljs-keyword">const</span> dom = el.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.el-select-dropdown .el-select-dropdown__wrap&#x27;</span>);  <span class="hljs-comment">// 获取下拉框元素</span><br>      dom.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// 监听元素触底</span><br>        <span class="hljs-keyword">const</span> condition = <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollHeight</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">scrollTop</span> &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientHeight</span>;<br>        <span class="hljs-keyword">if</span> (condition) &#123;<br>          binding.<span class="hljs-title function_">value</span>();<br>        &#125;<br>      &#125;);<br>    &#125;,<br>  &#125;,<br><br></code></pre></td></tr></table></figure><ol start="3"><li>方法</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">loadMore</span><span class="hljs-params">()</span></span> &#123;<br>   console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;到底部了，继续加载数据&#x27;</span>)<br>   <span class="hljs-comment">// 当下拉框滚动且触底时，会触发此事件，可以在此处去请求下拉框分页数据</span><br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;el-select-数据下拉懒加载&quot;&gt;&lt;a href=&quot;#el-select-数据下拉懒加载&quot; class=&quot;headerlink&quot; title=&quot;el-select 数据下拉懒加载&quot;&gt;&lt;/a&gt;el-select 数据下拉懒加载&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;下拉框需</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>JS基础</title>
    <link href="http://example.com/2023/03/13/JS%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/03/13/JS%E5%9F%BA%E7%A1%80/</id>
    <published>2023-03-13T07:06:49.000Z</published>
    <updated>2023-04-25T07:24:13.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-中的-8-种数据类型及区别"><a href="#JS-中的-8-种数据类型及区别" class="headerlink" title="JS 中的 8 种数据类型及区别"></a>JS 中的 8 种数据类型及区别</h1><h2 id="包括值类型-基本对象类型-和引用类型-复杂对象类型"><a href="#包括值类型-基本对象类型-和引用类型-复杂对象类型" class="headerlink" title="包括值类型(基本对象类型)和引用类型(复杂对象类型)"></a>包括值类型(基本对象类型)和引用类型(复杂对象类型)</h2><p>基本类型(值类型)： Number(数字),String(字符串),Boolean(布尔),Symbol(符号),null(空),undefined(未定义)在内存中占据固定大小，保存在栈内存中</p><p>引用类型(复杂数据类型)： Object(对象)、Function(函数)。其他还有 Array(数组)、Date(日期)、RegExp(正则表达式)、特殊的基本包装类型(String、Number、Boolean) 以及单体内置对象(Global、Math)等 引用类型的值是对象 保存在堆内存中，栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。</p><h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><p>Symbol：使用 Symbol 来作为对象属性名(key) 利用该特性，把一些不需要对外操作和访问的属性使用 Symbol 来定义</p><p>BigInt：由于在 Number 与 BigInt 之间进行转换会损失精度，因而建议仅在值可能大于 253 时使用 BigInt 类型，并且不在两种类型之间进行相互转换。</p><h1 id="JS-中的数据类型检测方案"><a href="#JS-中的数据类型检测方案" class="headerlink" title="JS 中的数据类型检测方案"></a>JS 中的数据类型检测方案</h1><h2 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1.typeof"></a>1.typeof</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-number">1</span>); <span class="hljs-comment">// number</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-literal">true</span>); <span class="hljs-comment">// boolean</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-string">&#x27;mc&#x27;</span>); <span class="hljs-comment">// string</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> Symbol); <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;); <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>()); <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> []); <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> &#123;&#125;); <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-literal">null</span>); <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// undefined</span><br>优点：能够快速区分基本数据类型<br><br>缺点：不能将 Object、<span class="hljs-built_in">Array</span> 和 <span class="hljs-literal">Null</span> 区分，都返回 object<br></code></pre></td></tr></table></figure><h2 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2.instanceof"></a>2.instanceof</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Number</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Boolean</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>); <span class="hljs-comment">// true</span><br>优点：能够区分 <span class="hljs-title class_">Array</span>、<span class="hljs-title class_">Object</span> 和 <span class="hljs-title class_">Function</span>，适合用于判断自定义的类实例对象<br><br>缺点：<span class="hljs-title class_">Number</span>，<span class="hljs-title class_">Boolean</span>，<span class="hljs-title class_">String</span> 基本数据类型不能判断<br></code></pre></td></tr></table></figure><h2 id="3-Object-prototype-toString-call"><a href="#3-Object-prototype-toString-call" class="headerlink" title="3.Object.prototype.toString.call()"></a>3.Object.prototype.toString.call()</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sqf">var <span class="hljs-built_in">toString</span> = <span class="hljs-built_in">Object</span>.prototype.<span class="hljs-built_in">toString</span>;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">//[object Number]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//[object Boolean]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(<span class="hljs-string">&#x27;mc&#x27;</span>)); <span class="hljs-comment">//[object String]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>([])); <span class="hljs-comment">//[object Array]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(&#123;&#125;)); <span class="hljs-comment">//[object Object]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(function () &#123;&#125;)); <span class="hljs-comment">//[object Function]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(undefined)); <span class="hljs-comment">//[object Undefined]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(null)); <span class="hljs-comment">//[object Null]</span><br></code></pre></td></tr></table></figure><p>优点：精准判断数据类型</p><p>缺点：写法繁琐不容易记，推荐进行封装后使用</p><p>instanceof 的作用<br>用于判断一个引用类型是否属于某构造函数；</p><p>还可以在继承关系中用来判断一个实例是否属于它的父类型。</p><p>instanceof 和 typeof 的区别：<br>typeof 在对值类型 number、string、boolean 、null 、 undefined、 以及引用类型的 function 的反应是精准的；但是，对于对象{ } 、数组[ ] 、null 都会返回 object</p><p>为了弥补这一点，instanceof 从原型的角度，来判断某引用属于哪个构造函数，从而判定它的数据类型。</p><h1 id="var-amp-amp-let-amp-amp-const"><a href="#var-amp-amp-let-amp-amp-const" class="headerlink" title="var &amp;&amp; let &amp;&amp; const"></a>var &amp;&amp; let &amp;&amp; const</h1><p>ES6 之前创建变量用的是 var,之后创建变量用的是 let&#x2F;const</p><h2 id="三者区别："><a href="#三者区别：" class="headerlink" title="三者区别："></a>三者区别：</h2><p>1.var 定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。<br>let 定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。<br>const 用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，且不能修改。<br>2.var 可以先使用，后声明，因为存在变量提升；let 必须先声明后使用。<br>3.var 是允许在相同作用域内重复声明同一个变量的，而 let 与 const 不允许这一现象。 4.在全局上下文中，基于 let 声明的全局变量和全局对象 GO（window）没有任何关系。<br>var 声明的变量会和 GO 有映射关系； 5.会产生暂时性死区：<br>暂时性死区是浏览器的 bug：检测一个未被声明的变量类型时，不会报错，会返回 undefined<br>如：console.log(typeof a) &#x2F;&#x2F;undefined<br>而：console.log(typeof a)&#x2F;&#x2F;未声明之前不能使用<br>let a</p><p>6.let &#x2F;const&#x2F;function 会把当前所在的大括号(除函数之外)作为一个全新的块级上下文，应用这个机制，在开发项目的时候，遇到循环事件绑定等类似的需求，无需再自己构建闭包来存储，只要基于 let 的块作用特征即可解决</p><h1 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h1><p>创建函数的时候，已经声明了当前函数的作用域&#x3D;&#x3D;&gt;当前创建函数所处的上下文。如果是在全局下创建的函数就是[[scope]]:EC(G)，函数执行的时候，形成一个全新的私有上下文 EC(FN)，供字符串代码执行(进栈执行)</p><p>定义：简单来说作用域就是变量与函数的可访问范围，由当前环境与上层环境的一系列变量对象组成 1.全局作用域：代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。 2.函数作用域：在固定的代码片段才能被访问</p><p>作用：作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p><p>作用域链参考链接一般情况下，变量到 创建该变量 的函数的作用域中取值。但是如果在当前作用域中没有查到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p><h1 id="闭包的两大作用：保存-x2F-保护"><a href="#闭包的两大作用：保存-x2F-保护" class="headerlink" title="闭包的两大作用：保存&#x2F;保护"></a>闭包的两大作用：保存&#x2F;保护</h1><h2 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h2><p>函数执行时形成的私有上下文 EC(FN)，正常情况下，代码执行完会出栈后释放;但是特殊情况下，如果当前私有上下文中的某个东西被上下文以外的事物占用了，则上下文不会出栈释放，从而形成不销毁的上下文。 函数执行函数执行过程中，会形成一个全新的私有上下文，可能会被释放，可能不会被释放，不论释放与否，他的作用是：</p><p>（1）保护：划分一个独立的代码执行区域，在这个区域中有自己私有变量存储的空间，保护自己的私有变量不受外界干扰（操作自己的私有变量和外界没有关系）；</p><p>（2）保存：如果当前上下文不被释放【只要上下文中的某个东西被外部占用即可】，则存储的这些私有变量也不会被释放，可以供其下级上下文中调取使用，相当于把一些值保存起来了；</p><p>我们把函数执行形成私有上下文，来保护和保存私有变量机制称为闭包。</p><p>闭包是指有权访问另一个函数作用域中的变量的函数–《JavaScript 高级程序设计》</p><p>稍全面的回答： 在 js 中变量的作用域属于函数作用域, 在函数执行完后,作用域就会被清理,内存也会随之被回收,但是由于闭包函数是建立在函数内部的子函数, 由于其可访问上级作用域,即使上级函数执行完, 作用域也不会随之销毁, 这时的子函数(也就是闭包),便拥有了访问上级作用域中变量的权限,即使上级函数执行完后作用域内的值也不会被销毁。</p><h2 id="闭包的特性："><a href="#闭包的特性：" class="headerlink" title="闭包的特性："></a>闭包的特性：</h2><p>1、内部函数可以访问定义他们外部函数的参数和变量。(作用域链的向上查找，把外围的作用域中的变量值存储在内存中而不是在函数调用完毕后销毁)设计私有的方法和变量，避免全局变量的污染。</p><p>1.1.闭包是密闭的容器，，类似于 set、map 容器，存储数据的</p><p>1.2.闭包是一个对象，存放数据的格式为 key-value 形式</p><p>2、函数嵌套函数</p><p>3、本质是将函数内部和外部连接起来。优点是可以读取函数内部的变量，让这些变量的值始终保存在内存中，不会在函数被调用之后自动清除</p><h2 id="闭包形成的条件："><a href="#闭包形成的条件：" class="headerlink" title="闭包形成的条件："></a>闭包形成的条件：</h2><p>函数的嵌套<br>内部函数引用外部函数的局部变量，延长外部函数的变量生命周期</p><h2 id="闭包的用途："><a href="#闭包的用途：" class="headerlink" title="闭包的用途："></a>闭包的用途：</h2><p>模仿块级作用域<br>保护外部函数的变量 能够访问函数定义时所在的词法作用域(阻止其被回收)<br>封装私有化变量<br>创建模块</p><h2 id="闭包应用场景"><a href="#闭包应用场景" class="headerlink" title="闭包应用场景"></a>闭包应用场景</h2><p>闭包的两个场景，闭包的两大作用：保存&#x2F;保护。 在开发中, 其实我们随处可见闭包的身影, 大部分前端 JavaScript 代码都是“事件驱动”的,即一个事件绑定的回调方法; 发送 ajax 请求成功|失败的回调;setTimeout 的延时回调;或者一个函数内部返回另一个匿名函数,这些都是闭包的应用。</p><p>闭包的优点：延长局部变量的生命周期</p><p>闭包缺点：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</p><h1 id="JS-中-this-的情况"><a href="#JS-中-this-的情况" class="headerlink" title="JS 中 this 的情况"></a>JS 中 this 的情况</h1><p>普通函数调用：通过函数名()直接调用：this 指向全局对象 window（注意 let 定义的变量不是 window 属性，只有 window.xxx 定义的才是。即 let a &#x3D;’aaa’; this.a 是 undefined）<br>构造函数调用：函数作为构造函数，用 new 关键字调用时：this 指向新 new 出的对象<br>对象函数调用：通过对象.函数名()调用的：this 指向这个对象<br>箭头函数调用：箭头函数里面没有 this ，所以永远是上层作用域 this（上下文）<br>apply 和 call 调用：函数体内 this 的指向的是 call&#x2F;apply 方法第一个参数，若为空默认是指向全局对象 window。<br>函数作为数组的一个元素，通过数组下标调用的：this 指向这个数组<br>函数作为 window 内置函数的回调函数调用：this 指向 window（如 setInterval setTimeout 等）</p><h1 id="call-x2F-apply-x2F-bind-的区别"><a href="#call-x2F-apply-x2F-bind-的区别" class="headerlink" title="call&#x2F;apply&#x2F;bind 的区别"></a>call&#x2F;apply&#x2F;bind 的区别</h1><p>相同：</p><p>1、都是用来改变函数的 this 对象的指向的。<br>2、第一个参数都是 this 要指向的对象。<br>3、都可以利用后续参数传参。</p><p>不同：</p><p>apply 和 call 传入的参数列表形式不同。apply 接收 arguments，call 接收一串参数列表</p><p>fn.call(obj, 1, 2);<br>fn.apply(obj, [1, 2]);<br>bind：语法和 call 一模一样，区别在于立即执行还是等待执行，bind 不兼容 IE6~8<br>bind 主要就是将函数绑定到某个对象，bind()会创建一个函数，返回对应函数便于稍后调用；而 apply、call 则是立即调用。</p><p>总结：基于 Function.prototype 上的 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。apply 接收参数的是数组，call 接受参数列表，&#96;&#96;bind方法通过传入一个对象，返回一个this绑定了传入对象的新函数。这个函数的this指向除了使用new&#96;时会被改变，其他情况下都不会改变。若为空默认是指向全局对象 window。</p><h1 id="箭头函数的特性"><a href="#箭头函数的特性" class="headerlink" title="箭头函数的特性"></a>箭头函数的特性</h1><p>箭头函数没有自己的 this，会捕获其所在的上下文的 this 值，作为自己的 this 值<br>箭头函数没有 constructor，是匿名函数，不能作为构造函数，不能通过 new 调用；<br>没有 new.target 属性。在通过 new 运算符被初始化的函数或构造方法中，new.target 返回一个指向构造方法或函数的引用。在普通的函数调用中，new.target 的值是 undefined<br>箭头函数不绑定 Arguments 对象。取而代之用 rest 参数…解决。由于 箭头函数没有自己的 this 指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定 this），他们的第一个参数会被忽略。（这种现象对于 bind 方法同样成立）<br>箭头函数通过 call() 或 apply() 方法调用一个函数时，只传入了一个参数，对 this 并没有影响。<br>箭头函数没有原型属性 Fn.prototype 值为 undefined<br>箭头函数不能当做 Generator 函数,不能使用 yield 关键字<br>参考：箭头函数与普通函数的区别</p><h1 id="原型-amp-amp-原型链"><a href="#原型-amp-amp-原型链" class="headerlink" title="原型 &amp;&amp; 原型链"></a>原型 &amp;&amp; 原型链</h1><p>原型关系：</p><p>每个 class 都有显示原型 prototype<br>每个实例都有隐式原型 <strong>proto</strong><br>实例的 <strong>proto</strong> 指向对应 class 的 prototype<br>‌ 原型: 在 JS 中，每当定义一个对象（函数也是对象）时，对象中都会包含一些预定义的属性。其中每个函数对象都有一个 prototype 属性，这个属性指向函数的原型对象。</p><p>原型链：函数的原型链对象 constructor 默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针 proto,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用 proto 一直指向 Object 的原型对象上，而 Object 原型对象用 Object.prototype.** proto** &#x3D; null 表示原型链顶端。如此形成了 js 的原型链继承。同时所有的 js 对象都有 Object 的基本防范</p><p>特点: JavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p><h1 id="new-运算符的实现机制"><a href="#new-运算符的实现机制" class="headerlink" title="new 运算符的实现机制"></a>new 运算符的实现机制</h1><p>首先创建了一个新的空对象<br>设置原型，将对象的原型设置为函数的 prototype 对象。<br>让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）<br>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p><h1 id="EventLoop-事件循环"><a href="#EventLoop-事件循环" class="headerlink" title="EventLoop 事件循环"></a>EventLoop 事件循环</h1><p>JS 是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是，Promise.then，MutationObserver，宏任务的话就是 setImmediate setTimeout setInterval</p><p>JS 运行的环境。一般为浏览器或者 Node。 在浏览器环境中，有 JS 引擎线程和渲染线程，且两个线程互斥。 Node 环境中，只有 JS 线程。 不同环境执行机制有差异，不同任务进入不同 Event Queue 队列。 当主程结束，先执行准备好微任务，然后再执行准备好的宏任务，一个轮询结束。</p><p>浏览器中的任务源(task):</p><p>宏任务(macrotask)：<br>宿主环境提供的，比如浏览器<br>ajax、setTimeout、setInterval、setTmmediate(只兼容 ie)、script、requestAnimationFrame、messageChannel、UI 渲染、一些浏览器 api<br>微任务(microtask)：<br>语言本身提供的，比如 promise.then<br>then、queueMicrotask(基于 then)、mutationObserver(浏览器提供)、messageChannel 、mutationObersve<br>传送门 ☞ # 宏任务和微任务</p><h1 id="setTimeout、Promise、Async-x2F-Await-的区别"><a href="#setTimeout、Promise、Async-x2F-Await-的区别" class="headerlink" title="setTimeout、Promise、Async&#x2F;Await 的区别"></a>setTimeout、Promise、Async&#x2F;Await 的区别</h1><p>1.setTimeout<br>settimeout 的回调函数放到宏任务队列里，等到执行栈清空以后执行。</p><p>2.Promise</p><p>Promise 本身是同步的立即执行函数， 当在 executor 中执行 resolve 或者 reject 的时候, 此时是异步操作， 会先执行 then&#x2F;catch 等，当主栈完成后，才会去调用 resolve&#x2F;reject 中存放的方法执行。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>);<br>let promise1 = <span class="hljs-keyword">new</span> Promise(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;promise1&#x27;</span>);<br>resolve();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;promise1 end&#x27;</span>);<br>&#125;).then(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;promise2&#x27;</span>);<br>&#125;);<br>setTimeout(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;settimeout&#x27;</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>);<br><span class="hljs-comment">// 输出顺序: script start-&gt;promise1-&gt;promise1 end-&gt;script end-&gt;promise2-&gt;settimeout</span><br></code></pre></td></tr></table></figure><p>3.async&#x2F;await</p><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>```<span class="language-javascript">js</span><br><span class="language-javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;async1 start&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-keyword">await</span> <span class="hljs-title function_">async2</span>();</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;async1 end&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async2</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;async2&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;script start&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-title function_">async1</span>();</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;script end&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end</span></span><br><span class="language-javascript"></span><br></code></pre></td></tr></table></figure><h1 id="Async-x2F-Await-如何通过同步的方式实现异步"><a href="#Async-x2F-Await-如何通过同步的方式实现异步" class="headerlink" title="Async&#x2F;Await 如何通过同步的方式实现异步"></a>Async&#x2F;Await 如何通过同步的方式实现异步</h1><p>Async&#x2F;Await 就是一个自执行的 generate 函数。利用 generate 函数的特性把异步的代码写成“同步”的形式,第一个请求的返回值作为后面一个请求的参数,其中每一个参数都是一个 promise 对象.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS-中的-8-种数据类型及区别&quot;&gt;&lt;a href=&quot;#JS-中的-8-种数据类型及区别&quot; class=&quot;headerlink&quot; title=&quot;JS 中的 8 种数据类型及区别&quot;&gt;&lt;/a&gt;JS 中的 8 种数据类型及区别&lt;/h1&gt;&lt;h2 id=&quot;包括值类型-基本对</summary>
      
    
    
    
    <category term="js基础" scheme="http://example.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序路由参数校验，自动跳转错误页面和登录页面</title>
    <link href="http://example.com/2023/03/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2%E5%92%8C%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/"/>
    <id>http://example.com/2023/03/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2%E5%92%8C%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/</id>
    <published>2023-03-10T12:54:54.000Z</published>
    <updated>2023-04-10T12:58:40.978Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs csharp">    我们定义了一个checkParams函数用于校验路由参数，检查了参数是否为空、是否符合格式要求以及用户登录状态。如果校验不通过，则自动跳转到相应的错误页面或登录页面。在路由页面的onLoad函数中，我们调用checkParams函数进行参数校验。如果校验通过，则继续页面加载逻辑。<br>    <span class="hljs-comment">// 校验函数</span><br><span class="hljs-function">function <span class="hljs-title">checkParams</span>(<span class="hljs-params"><span class="hljs-keyword">params</span></span>)</span> &#123;<br>  <span class="hljs-comment">// 检查参数是否为空</span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">params</span> || Object.keys(<span class="hljs-keyword">params</span>).length === <span class="hljs-number">0</span>) &#123;<br>    wx.navigateTo(&#123;<br>      url: <span class="hljs-string">&#x27;/pages/errorPage&#x27;</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br><br>  <span class="hljs-comment">// 检查参数格式是否正确</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">params</span>.id !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    wx.navigateTo(&#123;<br>      url: <span class="hljs-string">&#x27;/pages/errorPage&#x27;</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br><br>  <span class="hljs-comment">// 检查登录状态</span><br>  <span class="hljs-keyword">const</span> userInfo = wx.getStorageSync(<span class="hljs-string">&#x27;userInfo&#x27;</span>)<br>  <span class="hljs-keyword">if</span> (!userInfo) &#123;<br>    wx.navigateTo(&#123;<br>      url: <span class="hljs-string">&#x27;/pages/loginPage&#x27;</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">// 在需要校验参数的路由页面中调用校验函数</span><br>Page(&#123;<br>  onLoad: function(options) &#123;<br>    <span class="hljs-keyword">if</span> (checkParams(options)) &#123;<br>      <span class="hljs-comment">// 参数校验通过，继续页面加载逻辑</span><br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://example.com/2023/03/10/TypeScript%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/03/10/TypeScript%E5%9F%BA%E7%A1%80/</id>
    <published>2023-03-10T06:09:06.000Z</published>
    <updated>2023-03-13T12:23:03.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-TypeScript？"><a href="#什么是-TypeScript？" class="headerlink" title="什么是 TypeScript？"></a>什么是 TypeScript？</h2><p>TypeScript，简称 ts，是微软开发的一种静态的编程语言，它是 JavaScript 的超集。<br>简单来说，js 有的 ts 都有，所有 js 代码都可以在 ts 里面运行。<br>ts 支持类型支持，ts &#x3D; type +JavaScript。</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 数值类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">18</span><br><br><span class="hljs-comment">// 字符串类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;dinghw&#x27;</span><br><br><span class="hljs-comment">// 布尔类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">isLoading</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">un</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><br><span class="hljs-comment">// null</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">timer</span>:<span class="hljs-literal">null</span> = <span class="hljs-literal">null</span><br><br><span class="hljs-comment">// symbol</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">id</span>:<span class="hljs-built_in">symbol</span> = <span class="hljs-title class_">Symbol</span>()。<br><br></code></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>也就是说明 b 这个变量既可以是字符串也可以是数字类型</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> b:<span class="hljs-built_in">string</span>|<span class="hljs-built_in">number</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>使用场景：给复杂的类型起个别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> s = <span class="hljs-built_in">string</span><br><span class="hljs-keyword">type</span> n = <span class="hljs-built_in">number</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: s = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: n = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">arr</span>:<span class="hljs-built_in">number</span>[]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> <span class="hljs-attr">arrList</span>:<span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>|<span class="hljs-built_in">string</span>&gt;=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;dhw&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//对象类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span>=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>|<span class="hljs-built_in">number</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>,<br><span class="hljs-title function_">say</span>():<span class="hljs-built_in">void</span>,<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>:<span class="hljs-title class_">Person</span>=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;dhw&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<br><span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>函数涉及的类型实际上指的是：函数参数和返回值的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 普通函数</span><br><span class="hljs-keyword">function</span> 函数名(形参<span class="hljs-number">1</span>： 类型=默认值， 形参<span class="hljs-number">2</span>：类型=默认值,...): 返回值类型 &#123; &#125;<br><span class="hljs-comment">// 声明式实际写法:</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add1</span>(<span class="hljs-params">num1: <span class="hljs-built_in">number</span>, num2: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> num1 + num2<br>&#125;<br><br><span class="hljs-comment">// 箭头函数</span><br><span class="hljs-keyword">const</span> 函数名（形参<span class="hljs-number">1</span>： 类型=默认值， 形参<span class="hljs-number">2</span>：类型=默认值, ...): 返回值类型 =&gt; &#123; &#125;<br><span class="hljs-keyword">const</span> add2 = (<span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> =<span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">100</span>): <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span>&#123;<br>   <span class="hljs-keyword">return</span> a + b<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>当一个对象类型被多次使用时，有如下两种方式来来描述对象的类型，以达到复用的目的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//接口——interface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">func</span>: <span class="hljs-function">()=&gt;</span><span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-comment">// 声明接口后，直接使用接口名称作为变量的类型</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">man</span>:<span class="hljs-title class_">Person</span>=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;dhw&#x27;</span>,<br>    <span class="hljs-attr">price</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;看电视&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//类型别名——type</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Ren</span>=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>|<span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">ding</span>:<span class="hljs-title class_">Ren</span>=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;dhw&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">12</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口和类型的区别-interface（接口）和-type（类型别名）的对比"><a href="#接口和类型的区别-interface（接口）和-type（类型别名）的对比" class="headerlink" title="接口和类型的区别 interface（接口）和 type（类型别名）的对比"></a>接口和类型的区别 interface（接口）和 type（类型别名）的对比</h2><p>相同点:<br>1、都可以给对象指定类型<br>2、都支持扩展,type 通过 &amp; 来扩展，interface 通过 extends 关键字来扩展<br>不同点:<br>1、interface 可以声明合并，如果是 type 的话，就会报重复定义的警告，无法实现声明合并。<br>2、类型别名，不仅可以为对象指定类型，实际上可以为任意类型指定别名</p><h2 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h2><p>如果两个接口之间有相同的属性或方法，可以将公共的属性或方法抽离出来，通过继承来实现复用 语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//接口继承</span><br><span class="hljs-comment">//继承后listB就有了listA的所有属性和方法</span><br><span class="hljs-keyword">interface</span> listA&#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">b</span>:<span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">interface</span> listB <span class="hljs-keyword">extends</span> listA&#123;<br>    <span class="hljs-attr">c</span>:<span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">obj</span>:listB=&#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">c</span>:<span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-TypeScript？&quot;&gt;&lt;a href=&quot;#什么是-TypeScript？&quot; class=&quot;headerlink&quot; title=&quot;什么是 TypeScript？&quot;&gt;&lt;/a&gt;什么是 TypeScript？&lt;/h2&gt;&lt;p&gt;TypeScript，简称 ts，是</summary>
      
    
    
    
    <category term="js基础" scheme="http://example.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>文件上传和下载</title>
    <link href="http://example.com/2023/02/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
    <id>http://example.com/2023/02/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</id>
    <published>2023-02-23T05:52:32.000Z</published>
    <updated>2023-03-23T11:55:08.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上传实现流程"><a href="#上传实现流程" class="headerlink" title="上传实现流程"></a>上传实现流程</h2><p>1、 el-upload</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;el-upload<br>ref=<span class="hljs-string">&quot;upload&quot;</span><br><span class="hljs-symbol">:limit=<span class="hljs-string">&quot;1&quot;</span></span><br>accept=<span class="hljs-string">&quot;.jpg, .png&quot;</span><br><span class="hljs-symbol">:action=<span class="hljs-string">&quot;upload.url&quot;</span></span><br><span class="hljs-symbol">:headers=<span class="hljs-string">&quot;upload.headers&quot;</span></span><br><span class="hljs-symbol">:file-list=<span class="hljs-string">&quot;upload.fileList&quot;</span></span><br><span class="hljs-symbol">:on-progress=<span class="hljs-string">&quot;handleFileUploadProgress&quot;</span></span><br><span class="hljs-symbol">:on-success=<span class="hljs-string">&quot;handleFileSuccess&quot;</span></span><br><span class="hljs-symbol">:auto-upload=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>&lt;el-button slot=<span class="hljs-string">&quot;trigger&quot;</span> size=<span class="hljs-string">&quot;small&quot;</span> type=<span class="hljs-string">&quot;primary&quot;</span>&gt;选取文件&lt;/el-button&gt;<br>&lt;el-button style=<span class="hljs-string">&quot;margin-left: 10px;&quot;</span> size=<span class="hljs-string">&quot;small&quot;</span> type=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-symbol">:loading=<span class="hljs-string">&quot;upload.isUploading&quot;</span></span> <span class="hljs-variable">@click</span>=<span class="hljs-string">&quot;submitUpload&quot;</span>&gt;上传到服务器&lt;/el-button&gt;<br>&lt;div slot=<span class="hljs-string">&quot;tip&quot;</span> class=<span class="hljs-string">&quot;el-upload__tip&quot;</span>&gt;只能上传jpg/png文件，且不超过<span class="hljs-number">500</span>kb&lt;/div&gt;<br>&lt;/el-upload&gt;<br><br></code></pre></td></tr></table></figure><p>2、data 中添加属性</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 上传参数<br>upload: &#123;<br>  <span class="hljs-regexp">//</span> 是否禁用上传<br>  isUploading: false,<br>  <span class="hljs-regexp">//</span> 设置上传的请求头部<br>  headers: &#123; Authorization: <span class="hljs-string">&quot;Bearer &quot;</span> + token &#125;,<br>  <span class="hljs-regexp">//</span> 上传的地址<br>  url: process.env.VUE_APP_BASE_API + <span class="hljs-string">&quot;/common/upload&quot;</span>,<br>  <span class="hljs-regexp">//</span> 上传的文件列表<br>  fileList: []<br>&#125;,<br></code></pre></td></tr></table></figure><p>3、添加对应事件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 文件提交处理</span><br>submit<span class="hljs-constructor">Upload()</span> &#123;<br>  this.$refs.upload.submit<span class="hljs-literal">()</span>;<br>&#125;,<br><span class="hljs-comment">// 文件上传中处理</span><br>handle<span class="hljs-constructor">FileUploadProgress(<span class="hljs-params">event</span>, <span class="hljs-params">file</span>, <span class="hljs-params">fileList</span>)</span> &#123;<br>  this.upload.isUploading = <span class="hljs-literal">true</span>;<br>&#125;,<br><span class="hljs-comment">// 文件上传成功处理</span><br>handle<span class="hljs-constructor">FileSuccess(<span class="hljs-params">response</span>, <span class="hljs-params">file</span>, <span class="hljs-params">fileList</span>)</span> &#123;<br>  this.upload.isUploading = <span class="hljs-literal">false</span>;<br>  this.form.filePath = response.url;<br>  this.msg<span class="hljs-constructor">Success(<span class="hljs-params">response</span>.<span class="hljs-params">msg</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="下载实现流程"><a href="#下载实现流程" class="headerlink" title="下载实现流程"></a>下载实现流程</h2><p>1、添加对应按钮和事件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">&lt;<span class="hljs-keyword">el</span>-button<br>  size=<span class="hljs-string">&quot;mini&quot;</span><br>  <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span><br>  icon=<span class="hljs-string">&quot;el-icon-edit&quot;</span><br>  @click=<span class="hljs-string">&quot;handleDownload(scope.row)&quot;</span><br>&gt;下载&lt;/<span class="hljs-keyword">el</span>-button&gt;<br></code></pre></td></tr></table></figure><p>2、实现文件下载</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">// 文件下载处理</span><br>    handleDownload(row) &#123;<br>      <span class="hljs-keyword">var</span> name = row.fileName;<br>      <span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = row.filePath;<br>      <span class="hljs-keyword">var</span> suffix = <span class="hljs-built_in">url</span>.substring(<span class="hljs-built_in">url</span>.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-built_in">url</span>.length);<br>      <span class="hljs-keyword">const</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>)<br>      a.setAttribute(<span class="hljs-string">&#x27;download&#x27;</span>, name + suffix)<br>      a.setAttribute(<span class="hljs-string">&#x27;target&#x27;</span>, <span class="hljs-string">&#x27;_blank&#x27;</span>)<br>      a.setAttribute(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-built_in">url</span>)<br>      a.click()<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;上传实现流程&quot;&gt;&lt;a href=&quot;#上传实现流程&quot; class=&quot;headerlink&quot; title=&quot;上传实现流程&quot;&gt;&lt;/a&gt;上传实现流程&lt;/h2&gt;&lt;p&gt;1、 el-upload&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="vue基础" scheme="http://example.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>数组操作方法</title>
    <link href="http://example.com/2023/02/17/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2023/02/17/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/</id>
    <published>2023-02-17T05:48:04.000Z</published>
    <updated>2023-02-17T06:15:13.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的数组方法"><a href="#常用的数组方法" class="headerlink" title="常用的数组方法"></a>常用的数组方法</h2><pre><code class="hljs">1、concat()方法用于合并两个或多个数组。返回一个新数组。(不改变原数组)2、find()方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。(不改变原数组)3、findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。(不改变原数组)4、indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。（通常用它判断数组中有没有这个元素）(不改变原数组)5、includes()方法用来判断一个数组是否包含一个指定的值，根据情况返回一个布尔值，如果包含则返回 true，否则返回false(不改变原数组)6、join()方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。(不改变原数组)7、toString()方法可将结果转换为字符串，并返回。(不改变原数组)8、sort()方法用于对数组的元素进行排序。排序顺序可以是字母或数字，并按升序或降序。(改变原数组）9、pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。(改变原数组)10、shift()方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。(改变原数组)11、push()方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。(改变原数组)12、unshift( )方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。(改变原数组)13、splice( )方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。如果没有删除元素，就返回一个空数组。若只添加不删除，参数 1 就为添加元素的起始下标（参数 1，从下标 x 开始包含；参数 2，删除 x 个；参数 3，要添加的元素）。(改变原数组)14、slice( )方法选取数组的一部分截取，并返回一个新数组。（参数 1，从下标 x 开始包含；参数 2，截取到下标 x 结束不包含）(不改变原数组)15、reverse( )方法将数组中元素的位置颠倒，并返回该数组。(改变原数组)16、sort( )方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的。(改变原数组)17、reduce( )方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。(不改变原数组) （reduce 是个强大的方法，可以做的事情有很多，且性能并不差 ，但是常常被忽略了，稍稍列举一下 reduce 方法可以干的事儿：累加累乘，权重求和，代替 reverse，代替 map 和 filter，代替 some 和 every，数组分割，数组过滤，数组填充，数组扁平，数组去重，数组最大最小值，数组成员独立拆解，数组成员个数统计，数组成员位置记录，数组成员特性分组，数组成员所含关键字统计，字符串翻转，数字千分化，异步累计，斐波那契数列，URL 参数反序列化，URL 参数序列化，返回对象指定键值，数组转对象...具体操作百度）</code></pre><h2 id="数组有哪几种循环方式？分别有什么作用？"><a href="#数组有哪几种循环方式？分别有什么作用？" class="headerlink" title="数组有哪几种循环方式？分别有什么作用？"></a>数组有哪几种循环方式？分别有什么作用？</h2><pre><code class="hljs">1、every()方法：测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。2、some()方法：测试是否至少有一个元素可以通过某个指定函数的测试。它返回一个布尔值。3、filter()方法：返回一个新数组, 其包含通过指定函数测试的所有元素，起到过滤作用。4、forEach()方法：对数组的每个元素进行数据的处理(引用数据类型)。（该方法没有无法停止遍历，使用 try catch 内部抛出错误，catch 捕获错误可以终止遍历，目前没有使们大可以用其他方法代替，every ，some 等。）5、map()映射一般用于返回一个处理后的新数组 （本身不会改变原数组，return 之可以更改数组中的引用数据类型的值）</code></pre><h2 id="数组去重复"><a href="#数组去重复" class="headerlink" title="数组去重复"></a>数组去重复</h2><pre><code class="hljs">1、set 去重<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">let <span class="hljs-built_in">num</span> = [...<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr)]<br>console.log(<span class="hljs-built_in">num</span>) <span class="hljs-comment">//[1,2,3,4]</span><br><span class="hljs-comment">// 利用set去重，拓展运算符转换为真数组</span><br></code></pre></td></tr></table></figure>2、reduce 去重<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> <span class="hljs-built_in">num</span> = arr.reduce((<span class="hljs-built_in">num</span>, ele) =&gt; &#123;<br>!<span class="hljs-built_in">num</span>.includes(ele) &amp;&amp; <span class="hljs-built_in">num</span>.<span class="hljs-built_in">push</span>(ele)<br><span class="hljs-built_in">return</span> <span class="hljs-built_in">num</span><br>&#125;, [])<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">num</span>) //[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>// 逻辑与短路运算，一假则假（左边为 <span class="hljs-literal">true</span>，执行右边的代码）<br></code></pre></td></tr></table></figure>3、filter 去重<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">num</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">indexOf</span>(item) === index<br>    &#125;)<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num(arr)) <span class="hljs-comment">//[1,2,3,4]</span><br></code></pre></td></tr></table></figure>4、forEach遍历  +  includes(是否为true)/indexOf(是否不为-1)/findIndex(是否不为-1)<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">num</span>(<span class="hljs-params">add</span>) &#123;<br>  let res = []<br>  add.forEach(<span class="hljs-function"><span class="hljs-params">ele</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!res.<span class="hljs-built_in">includes</span>(ele)) &#123;<br>       res.<span class="hljs-built_in">push</span>(ele)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num(arr)) <span class="hljs-comment">//[1,2,3,4]</span><br></code></pre></td></tr></table></figure></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用的数组方法&quot;&gt;&lt;a href=&quot;#常用的数组方法&quot; class=&quot;headerlink&quot; title=&quot;常用的数组方法&quot;&gt;&lt;/a&gt;常用的数组方法&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;1、concat()方法用于合并两个或多个数组。返回一个新</summary>
      
    
    
    
    <category term="js基础" scheme="http://example.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="http://example.com/2023/02/14/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://example.com/2023/02/14/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2023-02-14T06:09:06.000Z</published>
    <updated>2023-02-17T05:49:35.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h2><p><code>浅拷贝</code>是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。<br>如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><p><code>深拷贝</code>是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。</p><p>总而言之，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p><h2 id="赋值和浅拷贝-x2F-深拷贝的区别"><a href="#赋值和浅拷贝-x2F-深拷贝的区别" class="headerlink" title="赋值和浅拷贝&#x2F;深拷贝的区别"></a>赋值和浅拷贝&#x2F;深拷贝的区别</h2><p>这三者的区别如下，不过比较的前提都是针对<code>引用类型</code>：</p><p>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</p><p>浅拷贝：重新在堆中创建内存，拷贝前后对象的基本数据类型互不影响，但拷贝前后对象的引用类型因共享同一块内存，会相互影响。</p><p>深拷贝：从堆内存中开辟一个新的区域存放新对象，对对象中的子对象进行递归拷贝,拷贝前后的两个对象互不影响。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浅拷贝与深拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝与深拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝与深拷贝&quot;&gt;&lt;/a&gt;浅拷贝与深拷贝&lt;/h2&gt;&lt;p&gt;&lt;code&gt;浅拷贝&lt;/code&gt;是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。&lt;br&gt;</summary>
      
    
    
    
    <category term="js基础" scheme="http://example.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>JS常见问题及常用方法</title>
    <link href="http://example.com/2023/02/10/JS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2023/02/10/JS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2023-02-10T13:24:58.000Z</published>
    <updated>2023-04-17T07:56:06.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解构赋值："><a href="#解构赋值：" class="headerlink" title="解构赋值："></a>解构赋值：</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> &#123; a, b, c, d, e &#125; = obj;<br><span class="hljs-comment">// ES6的解构赋值虽然好用。但是要注意解构的对象不能为undefined、null。否则会报错，故要给被解构的对象一个默认值。</span><br><span class="hljs-keyword">const</span> &#123; a, b, c, d, e &#125; = obj || &#123;&#125;;<br></code></pre></td></tr></table></figure><h2 id="合并数组："><a href="#合并数组：" class="headerlink" title="合并数组："></a>合并数组：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 数组合并</span><br><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">const</span> c = [...<span class="hljs-function"><span class="hljs-keyword">new</span> <span class="hljs-title">Set</span>(<span class="hljs-params">[...a, ...b]</span>)]</span>; <span class="hljs-comment">//[1,2,3,5,6]</span><br><span class="hljs-comment">// 对象合并</span><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  a: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  b: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj = &#123; ...obj1, ...obj2 &#125;; <span class="hljs-comment">//&#123;a:1,b:1&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="includes："><a href="#includes：" class="headerlink" title="includes："></a>includes：</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const condition = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">if</span> (condition.<span class="hljs-built_in">includes</span>(type)) &#123;<br>  <span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-built_in">includes</span>(<span class="hljs-number">2</span>) === <span class="hljs-literal">true</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-built_in">includes</span>(<span class="hljs-number">4</span>) === <span class="hljs-literal">false</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">NaN</span>].<span class="hljs-built_in">includes</span>(<span class="hljs-literal">NaN</span>) === <span class="hljs-literal">true</span>);<br><br></code></pre></td></tr></table></figure><h2 id="indexOf："><a href="#indexOf：" class="headerlink" title="indexOf："></a>indexOf：</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 查找一个元素是否在数组中，并返回索引</span><br>string.<span class="hljs-built_in">indexOf</span>(searchValue[, fromIndex])<br>其中，string是要搜索的字符串，searchValue是要查找的子字符串，fromIndex是可选参数，表示搜索的起始位置。<br><br>例如，以下代码将返回字符串<span class="hljs-string">&quot;hello&quot;</span>中子字符串<span class="hljs-string">&quot;lo&quot;</span>的索引位置：<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">var</span> pos = str.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;lo&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(pos); <span class="hljs-comment">// 输出 3</span><br>如果未找到子字符串，则返回<span class="hljs-number">-1</span>：<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">var</span> pos = str.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(pos); <span class="hljs-comment">// 输出 -1</span><br>另外，如果指定了fromIndex参数，则从该位置开始查找子字符串。例如，以下代码将从索引位置<span class="hljs-number">2</span>开始搜索字符串中的子字符串：<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">var</span> pos = str.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(pos); <span class="hljs-comment">// 输出 2</span><br></code></pre></td></tr></table></figure><h2 id="filter-和-find"><a href="#filter-和-find" class="headerlink" title="filter 和 find"></a>filter 和 find</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// find方法中找到符合条件的项，就不会继续遍历数组。</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> result = arr.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item === <span class="hljs-number">3</span>;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h1 id="JS-常用代码段"><a href="#JS-常用代码段" class="headerlink" title="JS 常用代码段"></a>JS 常用代码段</h1><h2 id="随机获得一个布尔值"><a href="#随机获得一个布尔值" class="headerlink" title="随机获得一个布尔值"></a>随机获得一个布尔值</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const randomBoolean <span class="hljs-operator">=</span> () <span class="hljs-operator">=</span>&gt; Math.random() &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-comment">;</span><br>console.log(randomBoolean())<span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><h2 id="判断今天是否为工作日"><a href="#判断今天是否为工作日" class="headerlink" title="判断今天是否为工作日"></a>判断今天是否为工作日</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const isWeekday = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">date</span></span>) =&gt;</span> <span class="hljs-built_in">date</span>.getDay() % <span class="hljs-number">6</span> !== <span class="hljs-number">0</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(isWeekday(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2021</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>)));<br><span class="hljs-comment">// Result: true (Monday)</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(isWeekday(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2021</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>)));<br><span class="hljs-comment">// Result: false (Sunday)</span><br><br></code></pre></td></tr></table></figure><h2 id="从日期中获取时间"><a href="#从日期中获取时间" class="headerlink" title="从日期中获取时间"></a>从日期中获取时间</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">通过使用 toTimeString() 方法，在正确的位置对字符串进行切片，我们可以从提供的日期中获取时间或者当前时间。<br>const timeFromDate = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">date</span></span>) =&gt;</span> <span class="hljs-built_in">date</span>.toTimeString().<span class="hljs-built_in">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(timeFromDate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2021</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">17</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0</span>)));<br><span class="hljs-comment">// Result: &quot;17:30:00&quot;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(timeFromDate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()));<br><span class="hljs-comment">// Result: will log the current time</span><br><br></code></pre></td></tr></table></figure><h2 id="滚动到页面底部"><a href="#滚动到页面底部" class="headerlink" title="滚动到页面底部"></a>滚动到页面底部</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> scrollToBottom = () =&gt; &#123;<br>  <span class="hljs-built_in">window</span>.scrollTo(<span class="hljs-number">0</span>, <span class="hljs-built_in">document</span>.documentElement.clientHeight);<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="滚动到页面顶部"><a href="#滚动到页面顶部" class="headerlink" title="滚动到页面顶部"></a>滚动到页面顶部</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> goToTop = () =&gt; <span class="hljs-built_in">window</span>.scrollTo(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>goToTop();<br><span class="hljs-comment">// Result: will scroll the browser to the top of the page</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解构赋值：&quot;&gt;&lt;a href=&quot;#解构赋值：&quot; class=&quot;headerlink&quot; title=&quot;解构赋值：&quot;&gt;&lt;/a&gt;解构赋值：&lt;/h2&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="js基础" scheme="http://example.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>vue中key的作用</title>
    <link href="http://example.com/2023/01/31/vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://example.com/2023/01/31/vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2023-01-31T11:33:30.000Z</published>
    <updated>2023-02-13T07:30:07.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-中-key-的作用"><a href="#vue-中-key-的作用" class="headerlink" title="vue 中 key 的作用"></a>vue 中 key 的作用</h2><ol><li><p>虚拟 DOM 中 key 的作用：<br>key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据【新虚拟 DOM】,<br>随后 Vue 进行【新虚拟 DOM】与【旧虚拟 DOM】的差异比较，比较规则如下：</p></li><li><p>对比规则：<br>(1).旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：<br>①.若虚拟 DOM 中内容没变, 直接使用之前的真实 DOM！<br>②.若虚拟 DOM 中内容变了, 则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM。<br>(2).旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key 创建新的真实 DOM，随后渲染到到页面。</p></li><li><p>用 index 作为 key 可能会引发的问题： 1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:会产生没有必要的真实 DOM 更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。 2. 如果结构中还包含输入类的 DOM：会产生错误 DOM 更新 &#x3D;&#x3D;&gt; 界面有问题。</p></li><li><p>开发中如何选择 key?: 1.最好使用每条数据的唯一标识作为 key, 比如 id、手机号、身份证号、学号等唯一值。 2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue-中-key-的作用&quot;&gt;&lt;a href=&quot;#vue-中-key-的作用&quot; class=&quot;headerlink&quot; title=&quot;vue 中 key 的作用&quot;&gt;&lt;/a&gt;vue 中 key 的作用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;虚拟 DOM 中 key 的作用：</summary>
      
    
    
    
    <category term="vue基础" scheme="http://example.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>vue管理系统常用方法总结</title>
    <link href="http://example.com/2023/01/15/vue%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/01/15/vue%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-15T11:33:30.000Z</published>
    <updated>2023-04-27T05:39:41.872Z</updated>
    
    <content type="html"><![CDATA[<ul><li>汇集了一些常用但是内容不是很多的方法。</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/ 通用下载方法<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">url, params, filename</span>) &#123;<br>  downloadLoadingInstance = <span class="hljs-title class_">Loading</span>.<span class="hljs-title function_">service</span>(&#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;正在下载数据，请稍候&quot;</span>, <span class="hljs-attr">spinner</span>: <span class="hljs-string">&quot;el-icon-loading&quot;</span>, <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;rgba(0, 0, 0, 0.7)&quot;</span>, &#125;)<br>  <span class="hljs-keyword">return</span> service.<span class="hljs-title function_">post</span>(url, params, &#123;<br>    <span class="hljs-attr">transformRequest</span>: [<span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(params) &#125;],<br>    <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;,<br>    <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;blob&#x27;</span><br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> (data) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> isLogin = <span class="hljs-keyword">await</span> <span class="hljs-title function_">blobValidate</span>(data);<br>    <span class="hljs-keyword">if</span> (isLogin) &#123;<br>      <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data], &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;application/vnd.ms-excel&#x27;</span> &#125;)<br>      <span class="hljs-title function_">saveAs</span>(blob, filename)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">const</span> resText = <span class="hljs-keyword">await</span> data.<span class="hljs-title function_">text</span>();<br>      <span class="hljs-keyword">const</span> rspObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(resText);<br>      <span class="hljs-keyword">const</span> errMsg = errorCode[rspObj.<span class="hljs-property">code</span>] || rspObj.<span class="hljs-property">msg</span> || errorCode[<span class="hljs-string">&#x27;default&#x27;</span>]<br>      <span class="hljs-title class_">Message</span>.<span class="hljs-title function_">error</span>(errMsg);<br>    &#125;<br>    downloadLoadingInstance.<span class="hljs-title function_">close</span>();<br>  &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(r)<br>    <span class="hljs-title class_">Message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;下载文件出现错误，请联系管理员！&#x27;</span>)<br>    downloadLoadingInstance.<span class="hljs-title function_">close</span>();<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="日期时间过滤器（JS）"><a href="#日期时间过滤器（JS）" class="headerlink" title="日期时间过滤器（JS）"></a>日期时间过滤器（JS）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&quot;dataFormat&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">originVal</span>) &#123;<br>    <span class="hljs-keyword">const</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(originVal);<br>    <span class="hljs-keyword">const</span> y = dt.<span class="hljs-title function_">getFullYear</span>();<br>    <span class="hljs-keyword">const</span> m = (dt.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span> + <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">const</span> d = (dt.<span class="hljs-title function_">getDate</span>() + <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><br>    <span class="hljs-keyword">const</span> hh = (dt.<span class="hljs-title function_">getHours</span>() + <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">const</span> mm = (dt.<span class="hljs-title function_">getMinutes</span>() + <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">const</span> ss = (dt.<span class="hljs-title function_">getSeconds</span>() + <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;m&#125;</span>-<span class="hljs-subst">$&#123;d&#125;</span> <span class="hljs-subst">$&#123;hh&#125;</span>:<span class="hljs-subst">$&#123;mm&#125;</span>:<span class="hljs-subst">$&#123;ss&#125;</span>`</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 大小写转换</span><br><span class="hljs-comment"> * @param str 待转换的字符串</span><br><span class="hljs-comment"> * @param type 1-全大写 2-全小写 3-首字母大写</span><br><span class="hljs-comment"> * @return str</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">const</span> turnCase = (<span class="hljs-built_in">str</span>,type) =&gt; &#123;<br>  <span class="hljs-keyword">switch</span> (type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.toUpperCase();<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.toLowerCase();<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>].toUpperCase() + <span class="hljs-built_in">str</span>.substring(<span class="hljs-number">1</span>).toLowerCase();<br>    <span class="hljs-literal">default</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="el-table-禁用单独一行"><a href="#el-table-禁用单独一行" class="headerlink" title="el-table 禁用单独一行"></a>el-table 禁用单独一行</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 禁用单独一行</span><br><span class="hljs-comment"> * */</span><br>&lt;el-<span class="hljs-keyword">table</span>-<span class="hljs-keyword">column</span><br>            <span class="hljs-keyword">type</span>=&quot;selection&quot;<br>            :selectable=&quot;checkboxSelect&quot;<br>            width=&quot;55&quot;&gt;<br>          &lt;/el-<span class="hljs-keyword">table</span>-<span class="hljs-keyword">column</span>&gt;<br>checkboxSelect(<span class="hljs-keyword">row</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">row</span>.id !== <span class="hljs-keyword">null</span><br>    &#125;,<br></code></pre></td></tr></table></figure><h2 id="el-table-element-ui-表格实现禁止选中特殊列"><a href="#el-table-element-ui-表格实现禁止选中特殊列" class="headerlink" title="el-table element ui 表格实现禁止选中特殊列"></a>el-table element ui 表格实现禁止选中特殊列</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * npm install --save vue-clipboard2</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * */</span><br>&lt;el-<span class="hljs-keyword">table</span>-<span class="hljs-keyword">column</span><br>            <span class="hljs-keyword">type</span>=&quot;selection&quot;<br>            :selectable=&quot;checkboxSelect&quot;<br>            width=&quot;55&quot;&gt;<br>          &lt;/el-<span class="hljs-keyword">table</span>-<span class="hljs-keyword">column</span>&gt;<br>checkboxSelect(<span class="hljs-keyword">row</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">row</span>.id !== <span class="hljs-keyword">null</span><br>    &#125;,<br></code></pre></td></tr></table></figure><h2 id="el-table-拖拽行，列表数据有特殊的值，不允许拖拽超过"><a href="#el-table-拖拽行，列表数据有特殊的值，不允许拖拽超过" class="headerlink" title="el-table 拖拽行，列表数据有特殊的值，不允许拖拽超过"></a>el-table 拖拽行，列表数据有特殊的值，不允许拖拽超过</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 采用的sortablejs这个库完成拖拽实现</span><br><span class="hljs-comment"> * 下载引入需要拖拽的页面</span><br><span class="hljs-comment"> *  npm install sortablejs --save</span><br><span class="hljs-comment"> *  import Sortable from &#x27;sortablejs&#x27;</span><br><span class="hljs-comment"> *  //页面挂载调用 this.rowDrop()</span><br><span class="hljs-comment"> * */</span><br>    <span class="hljs-comment">//拖拽</span><br>   <span class="hljs-title function_">rowDrop</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> tbody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.el-table__body-wrapper tbody&#x27;</span>)<br>      <span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span><br>      <span class="hljs-title class_">Sortable</span>.<span class="hljs-title function_">create</span>(tbody, &#123;<br>        <span class="hljs-attr">animation</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-title function_">onMove</span>(<span class="hljs-params">e</span>) &#123;<br>          <span class="hljs-comment">//拿到拖拽经过的元素把标签转成文字</span><br>          <span class="hljs-keyword">const</span> target = e.<span class="hljs-property">related</span>.<span class="hljs-property">innerText</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s+/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;🚀 ~ onMove ~ target&quot;</span>, target)<br>          <span class="hljs-comment">//如果拖拽的元素越过了不能拖拽的元素，就不能继续拖拽</span><br>          <span class="hljs-comment">// console.log(&#x27;,,,,,,&#x27;, target.indexOf(&#x27;小计&#x27;))</span><br>          <span class="hljs-keyword">if</span> (target.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;小计&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (_this.<span class="hljs-property">reloadData</span>) &#123;<br>              _this.$message(&#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;不能拖拽到其他分段,请刷新页面重新进行拖拽&#x27;</span><br>              &#125;)<br>            &#125;<br>            _this.<span class="hljs-property">reloadData</span> = <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// _this.reloadData = false</span><br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;,<br>        <span class="hljs-title function_">onEnd</span>(<span class="hljs-params">evt</span>) &#123;<br>          <span class="hljs-keyword">const</span> list = _this.<span class="hljs-property">tableDataT3A</span>;<br>          <span class="hljs-keyword">const</span> oldIndex = evt.<span class="hljs-property">oldIndex</span>;<br>          <span class="hljs-keyword">const</span> newIndex = evt.<span class="hljs-property">newIndex</span>;<br>          <span class="hljs-comment">// 拖拽之后改变数据</span><br>          <span class="hljs-keyword">const</span> oldItem = _this.<span class="hljs-property">tableDataT3A</span>.<span class="hljs-title function_">splice</span>(oldIndex, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];<br>          _this.<span class="hljs-property">tableDataT3A</span>.<span class="hljs-title function_">splice</span>(newIndex, <span class="hljs-number">0</span>, oldItem);<br>          <span class="hljs-keyword">if</span> (_this.<span class="hljs-property">reloadData</span>) &#123;<br>            _this.<span class="hljs-property">reloadData</span> = <span class="hljs-literal">false</span><br>            <span class="hljs-comment">// 复原拖拽之前的 数据</span><br>            <span class="hljs-keyword">const</span> item = list.<span class="hljs-title function_">splice</span>(newIndex, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];<br>            list.<span class="hljs-title function_">splice</span>(oldIndex, <span class="hljs-number">0</span>, item);<br>            <span class="hljs-comment">// 复原拖拽之前的 dom</span><br>            <span class="hljs-keyword">const</span> tagName = evt.<span class="hljs-property">item</span>.<span class="hljs-property">tagName</span>;<br>            <span class="hljs-keyword">const</span> items = evt.<span class="hljs-property">from</span>.<span class="hljs-title function_">getElementsByTagName</span>(tagName);<br>            <span class="hljs-keyword">if</span> (evt.<span class="hljs-property">oldIndex</span> &gt; evt.<span class="hljs-property">newIndex</span>) &#123;<br>              evt.<span class="hljs-property">from</span>.<span class="hljs-title function_">insertBefore</span>(evt.<span class="hljs-property">item</span>, items[evt.<span class="hljs-property">oldIndex</span> + <span class="hljs-number">1</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              evt.<span class="hljs-property">from</span>.<span class="hljs-title function_">insertBefore</span>(evt.<span class="hljs-property">item</span>, items[evt.<span class="hljs-property">oldIndex</span>]);<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> currRow = _this.<span class="hljs-property">tableDataT3A</span>.<span class="hljs-title function_">splice</span>(oldIndex, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>            <span class="hljs-comment">// console.log(&quot;🚀 ~ onEnd ~ currRow,当前拖拽的数据&quot;, currRow)</span><br>            _this.<span class="hljs-property">tableDataT3A</span>.<span class="hljs-title function_">splice</span>(newIndex, <span class="hljs-number">0</span>, currRow)<br>            <span class="hljs-comment">//   拖动后获取newIdex</span><br>            <span class="hljs-keyword">let</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(_this.<span class="hljs-property">tableDataT3A</span>)<br>            <span class="hljs-comment">// console.log(&quot;🚀 ~ onEnd ~ arr，拖拽之后拿到的数据&quot;, arr)</span><br>            <span class="hljs-comment">//拖拽之后的数据</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">apiObjDrag</span> = arr<br>          &#125;<br>        &#125;,<br>      &#125;)<br>    &#125;,<br></code></pre></td></tr></table></figure><h2 id="拖拽调整盒子左右的大小"><a href="#拖拽调整盒子左右的大小" class="headerlink" title="拖拽调整盒子左右的大小"></a>拖拽调整盒子左右的大小</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;width-auto&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;product&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span></span><br><span class="language-xml">            左侧</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;line&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;resize-line&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span></span><br><span class="language-xml">            右侧</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> &lt;/template&gt;<br><br> <span class="hljs-comment">// 拖拽</span><br>    <span class="hljs-title function_">drapContent</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 获取 左边区域 的 宽度</span><br>      <span class="hljs-keyword">let</span> left = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;left&#x27;</span>);<br>      <span class="hljs-comment">// 获取 移动区域 的 宽度</span><br>      <span class="hljs-keyword">let</span> line = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;line&#x27;</span>);<br>      <span class="hljs-comment">// 获取 右边区域 的 宽度</span><br>      <span class="hljs-keyword">let</span> right = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;right&#x27;</span>);<br>      <span class="hljs-comment">// 移动区域鼠标移入事件</span><br>      line.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-comment">// 移动的距离</span><br>        <span class="hljs-keyword">let</span> lineLeft = e.<span class="hljs-property">clientX</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>          <span class="hljs-comment">// 移动的位置 （侧边栏的宽度 + 移动的宽度）</span><br>          <span class="hljs-keyword">let</span> diffVal = <span class="hljs-number">276</span> + (e.<span class="hljs-property">clientX</span> - lineLeft);<br>          <span class="hljs-comment">// 移动区间的范围 [276, 740]</span><br>          <span class="hljs-keyword">if</span> (diffVal &gt;= <span class="hljs-number">40</span> &amp;&amp; diffVal &lt;= <span class="hljs-number">1200</span>) &#123;<br>            <span class="hljs-comment">// 移动区域距离左边的距离</span><br>            line.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = diffVal + <span class="hljs-string">&#x27;px&#x27;</span>;<br>            <span class="hljs-comment">// 左边缩放的宽度</span><br>            left.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = diffVal + <span class="hljs-string">&#x27;px&#x27;</span>;<br>            <span class="hljs-comment">// 右边改变后的宽度 （改变后的宽度要加上移动区域的宽度）</span><br>            right.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;product&#x27;</span>).<span class="hljs-property">clientWidth</span> - (diffVal + <span class="hljs-number">16</span>) + <span class="hljs-string">&#x27;px&#x27;</span>;<br>          &#125;<br>        &#125;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span>;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-literal">null</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>   <span class="hljs-comment">//样式</span><br>   .<span class="hljs-property">content</span> &#123;<br>  <span class="hljs-attr">display</span>: flex;<br>  <span class="hljs-comment">// position: relative;</span><br>  <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>%;<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>%;<br>&#125;<br>.<span class="hljs-property">left</span> &#123;<br>  <span class="hljs-attr">width</span>: 260px;<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>%;<br>&#125;<br>.<span class="hljs-property">resize</span>-line &#123;<br>  <span class="hljs-comment">/*鼠标移入显示左右箭头*/</span><br>  <span class="hljs-attr">cursor</span>: ew-resize;<br>  <span class="hljs-attr">width</span>: 16px;<br>  min-<span class="hljs-attr">width</span>: 16px;<br>  max-<span class="hljs-attr">width</span>: 16px;<br>  background-<span class="hljs-attr">color</span>: transparent;<br>&#125;<br>.<span class="hljs-property">right</span> &#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-title function_">calc</span>(<span class="hljs-number">100</span>% - 205px);<br>  <span class="hljs-comment">// width: calc(100% - 276px);</span><br>  <span class="hljs-comment">// max-width: calc(100% - 276px);</span><br>  user-<span class="hljs-attr">select</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="el-input-常用限制"><a href="#el-input-常用限制" class="headerlink" title="el-input 常用限制"></a>el-input 常用限制</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade">第一种正则<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 第一种正则</span><br><span class="hljs-comment"> * */</span><br>onkeyup=<span class="hljs-string">&quot;value= value.match(/\d+(\.\d&#123;0,2&#125;)?/) ? value.match(/\d+(\.\d&#123;0,2&#125;)?/)[0] : &#x27;&#x27;&quot;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 第二种函数封装</span><br><span class="hljs-comment"> * 注入函数, 过滤除数字外的字符</span><br><span class="hljs-comment"> * */</span><br>  &lt;el-input v-model=<span class="hljs-string">&quot;formData.openGroupPrice&quot;</span><br>        @input=<span class="hljs-string">&quot;handleInput($event,&#x27;openGroupPrice&#x27;)&quot;</span><br>        placeholder=<span class="hljs-string">&quot;请输入优惠价&quot;</span>&gt;&lt;/el-input&gt;<br><br>  handleInput (value, field) &#123;<br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (value.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>) &gt; <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-comment">// 保留小数点两位小数以及只能输入一位小数点</span><br>            let newValue = value.<span class="hljs-built_in">slice</span>(<span class="hljs-number">0</span>, value.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">3</span>)<br>            this.formData[field] = newValue.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/\.&#123;2,&#125;/g</span>, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 过滤除数字外的字符</span><br>            this.formData[field] = value.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/^\.+|[^\d.]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;汇集了一些常用但是内容不是很多的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;figure class=&quot;highlight javascri</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vue插槽的使用</title>
    <link href="http://example.com/2022/12/12/vue%E6%8F%92%E6%A7%BD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/12/12/vue%E6%8F%92%E6%A7%BD%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-12-12T09:47:53.000Z</published>
    <updated>2023-02-13T07:27:55.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、什么是插槽"><a href="#1、什么是插槽" class="headerlink" title="1、什么是插槽"></a>1、什么是插槽</h2><p>1、插槽就是在子组件中提供父组件一个占位符，用于用户填充任何自己所需求的模板代码，<br>2、插槽显不显示、怎样显示是由父组件来控制的，而插槽在哪里显示在什么位置就由子组件来进行控制<br>3、可以把插槽认为是组件封装期间，为用户预留的内容的占位符。</p><h2 id="2、什么时候使用插槽"><a href="#2、什么时候使用插槽" class="headerlink" title="2、什么时候使用插槽"></a>2、什么时候使用插槽</h2><p>当子组件被复用时，需要在特定的区域展示不同的需求内容</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><h3 id="3-1-匿名插槽（默认插槽）"><a href="#3-1-匿名插槽（默认插槽）" class="headerlink" title="3.1.匿名插槽（默认插槽）"></a>3.1.匿名插槽（默认插槽）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--父组件内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--子组件标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Category</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--子组件标签体内容，也就是需要插入的内容--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Category</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--子组件内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 在&lt;slot&gt;标签位置显示插入的内容--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-具名插槽"><a href="#3-2-具名插槽" class="headerlink" title="3.2.具名插槽"></a>3.2.具名插槽</h3><h4 id="需要使用多个插槽的时候，定义一个-name-属性，区分插槽对应的位置。"><a href="#需要使用多个插槽的时候，定义一个-name-属性，区分插槽对应的位置。" class="headerlink" title="需要使用多个插槽的时候，定义一个 name 属性，区分插槽对应的位置。"></a>需要使用多个插槽的时候，定义一个 name 属性，区分插槽对应的位置。</h4><!--父组件内容--><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Category</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Category</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--子组件内容--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span> slot标签，这个位置也可以写内容 <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-comment">&lt;!--   slot=&quot;center&quot;     对应    name=&quot;center&quot;   --&gt;</span><br><span class="hljs-comment">&lt;!--   slot=&quot;footer&quot;     对应    name=&quot;footer&quot;   --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-作用域插槽"><a href="#3-3-作用域插槽" class="headerlink" title="3.3.作用域插槽"></a>3.3.作用域插槽</h3><h4 id="当父组件需要用到子组件里的数据时，通过插槽传递数据。"><a href="#当父组件需要用到子组件里的数据时，通过插槽传递数据。" class="headerlink" title="当父组件需要用到子组件里的数据时，通过插槽传递数据。"></a>当父组件需要用到子组件里的数据时，通过插槽传递数据。</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!--父组件内容--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Category</span> &gt;</span></span><br><span class="language-xml">       <span class="hljs-comment">&lt;!--需要包裹一个template标签（必须），获取slot传递数据--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;link&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in scope.data&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Category</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--子组件内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--通过slot传递数据data--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、什么是插槽&quot;&gt;&lt;a href=&quot;#1、什么是插槽&quot; class=&quot;headerlink&quot; title=&quot;1、什么是插槽&quot;&gt;&lt;/a&gt;1、什么是插槽&lt;/h2&gt;&lt;p&gt;1、插槽就是在子组件中提供父组件一个占位符，用于用户填充任何自己所需求的模板代码，&lt;br&gt;2、插槽显</summary>
      
    
    
    
    <category term="vue基础" scheme="http://example.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>css 左边固定右边自适应的方案</title>
    <link href="http://example.com/2022/11/28/css%20%E5%B7%A6%E8%BE%B9%E5%9B%BA%E5%AE%9A%E5%8F%B3%E8%BE%B9%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2022/11/28/css%20%E5%B7%A6%E8%BE%B9%E5%9B%BA%E5%AE%9A%E5%8F%B3%E8%BE%B9%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E6%96%B9%E6%A1%88/</id>
    <published>2022-11-28T04:43:10.000Z</published>
    <updated>2023-02-14T02:32:14.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>将左边固定区域设置浮动，右边 margin 设置为左边固定 div 的宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>    <span class="hljs-attribute">background-color</span>:red;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>将父盒子设置相对定位，左边绝对定位，子绝父相，右边 margin 设置为左边固定 div 的宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>   <span class="hljs-attribute">position</span>: relative;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br> &#125;<br><br> <span class="hljs-selector-class">.box</span> <span class="hljs-selector-class">.left</span> &#123;<br>   <span class="hljs-attribute">position</span>: absolute;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">34</span>, <span class="hljs-number">132</span>, <span class="hljs-number">21</span>);<br> &#125;<br><br> <span class="hljs-selector-class">.box</span> <span class="hljs-selector-class">.right</span> &#123;<br>   <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">10</span>, <span class="hljs-number">163</span>, <span class="hljs-number">197</span>);<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h2><p>将父盒子设置弹性盒布局，左侧固定宽度，右侧设置 flex:1</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">34</span>, <span class="hljs-number">132</span>, <span class="hljs-number">21</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">10</span>, <span class="hljs-number">163</span>, <span class="hljs-number">197</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="左侧浮动，右侧-overflow-hidden-触发-bfc-bfc-区域不会和-float-元素重叠"><a href="#左侧浮动，右侧-overflow-hidden-触发-bfc-bfc-区域不会和-float-元素重叠" class="headerlink" title="左侧浮动，右侧 overflow: hidden;,触发 bfc,bfc 区域不会和 float 元素重叠"></a>左侧浮动，右侧 overflow: hidden;,触发 bfc,bfc 区域不会和 float 元素重叠</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">34</span>, <span class="hljs-number">132</span>, <span class="hljs-number">21</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">10</span>, <span class="hljs-number">163</span>, <span class="hljs-number">197</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浮动&quot;&gt;&lt;a href=&quot;#浮动&quot; class=&quot;headerlink&quot; title=&quot;浮动&quot;&gt;&lt;/a&gt;浮动&lt;/h2&gt;&lt;p&gt;将左边固定区域设置浮动，右边 margin 设置为左边固定 div 的宽度&lt;/p&gt;
&lt;figure class=&quot;highlight css</summary>
      
    
    
    
    <category term="js基础" scheme="http://example.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>防抖和节流</title>
    <link href="http://example.com/2022/11/27/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>http://example.com/2022/11/27/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2022-11-27T06:32:07.000Z</published>
    <updated>2023-03-07T02:13:53.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次"><a href="#1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次" class="headerlink" title="1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次"></a>1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次</h3><h6 id="1-典型场景：搜索框的输入"><a href="#1-典型场景：搜索框的输入" class="headerlink" title="1.典型场景：搜索框的输入"></a>1.典型场景：搜索框的输入</h6><h6 id="2-代码思路：利用定时器，每次触发前清空之前的定时器重新开始"><a href="#2-代码思路：利用定时器，每次触发前清空之前的定时器重新开始" class="headerlink" title="2.代码思路：利用定时器，每次触发前清空之前的定时器重新开始"></a>2.代码思路：利用定时器，每次触发前清空之前的定时器重新开始</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">     <span class="hljs-comment">// 首先声明一个全局变量为空，把它当做定时器的名字</span><br><span class="hljs-comment">// 然后再声明一个函数点击按钮的时候触发</span><br><span class="hljs-comment">// 函数内开启一个定时器，定时器上面使用clearTimeout清除定时器</span><br><span class="hljs-comment">// 当在规定时间内多次点击按钮的时候，就会一直清除定时器</span><br><span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">clearTimeout</span>(timer)<br>  timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>  &#125;, <span class="hljs-number">300</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、节流：单位时间内，频发触发事件，规定时间内只执行一次"><a href="#2、节流：单位时间内，频发触发事件，规定时间内只执行一次" class="headerlink" title="2、节流：单位时间内，频发触发事件，规定时间内只执行一次"></a>2、节流：单位时间内，频发触发事件，规定时间内只执行一次</h3><h6 id="1-典型场景：高频事件，快速点击，鼠标滑动，scroll-事件"><a href="#1-典型场景：高频事件，快速点击，鼠标滑动，scroll-事件" class="headerlink" title="1.典型场景：高频事件，快速点击，鼠标滑动，scroll 事件"></a>1.典型场景：高频事件，快速点击，鼠标滑动，scroll 事件</h6><h6 id="2-代码思路：利用定时器，等定时器执行完毕，才开启定时器"><a href="#2-代码思路：利用定时器，等定时器执行完毕，才开启定时器" class="headerlink" title="2.代码思路：利用定时器，等定时器执行完毕，才开启定时器"></a>2.代码思路：利用定时器，等定时器执行完毕，才开启定时器</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明一个全局变量为false（阀门）</span><br><span class="hljs-comment">// 然后再声明一个函数点击按钮的时候触发</span><br><span class="hljs-comment">// 函数内开启一个定时器，进入函数后首先进行一个if判断，如果阀门为true打开就直接return</span><br><span class="hljs-comment">// if语句下方，将阀门变为true,然后进入定时器，定时器内部关闭阀门为false</span><br><span class="hljs-comment">// 当定时器内部代码未执行完毕前，阀门就一直为true，只有定时器执行完毕后，阀门才重新关闭</span><br><span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (flag) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      flag = <span class="hljs-literal">true</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;节流函数&#x27;</span>);<br>        flag = <span class="hljs-literal">false</span><br>      &#125;, <span class="hljs-number">2000</span>)<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次&quot;&gt;&lt;a href=&quot;#1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次&quot; class=&quot;headerlink&quot; title=&quot;1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="js基础" scheme="http://example.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>forEach和map的区别</title>
    <link href="http://example.com/2022/11/25/forEach%E5%92%8Cmap%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/11/25/forEach%E5%92%8Cmap%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-11-25T14:36:38.000Z</published>
    <updated>2023-02-14T01:16:20.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、相同点"><a href="#1、相同点" class="headerlink" title="1、相同点"></a>1、相同点</h2><p>1） 都是循环遍历数组中的每一项。</p><p>2） 每次执行匿名函数都支持三个参数，参数分别为 item(当前每一项)，index(索引值)，arr(原数组)。</p><p>3） 匿名函数中的 this 都是指向 window。</p><p>4）只能遍历数组。</p><h2 id="2、不同点"><a href="#2、不同点" class="headerlink" title="2、不同点"></a>2、不同点</h2><p>1） map()会分配内存空间存储新数组并返回，forEach()不会返回数据。</p><p>2） forEach()允许 callback 更改原始数组的元素，map()返回新的数组，map() 不会对空数组进行检测。</p><p>二、forEach 和 map 有相同值的区别<br>相同处：forEach 和 map 都相当于封装好的单层 for 循环，三个值都相同。</p><h2 id="不同处："><a href="#不同处：" class="headerlink" title="不同处："></a>不同处：</h2><p>1、forEach()方法没有返回值，而 map()方法有返回值。</p><p>2、forEach 遍历通常都是直接引入当前遍历数组的内存地址，生成的数组的值发生变化，当前遍历的数组对应的值也会发生变化。</p><p>3、map 遍历的后的数组通常都是生成一个新的数组，新的数组的值发生变化，当前遍历的数组值不会变化。</p><p>4、总的来说 map 的速度大于 forEach。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol><li><p>forEach 适合于你并不打算改变数据的时候。</p></li><li><p>map()适用于你要改变数据值的时候。不仅仅在于它更快，而且返回一个新的数组。这样的优点在于你可以使用复合(composition)(map(), filter(), reduce()等组合使用)。</p></li></ol><p>性能上来说 for&gt;forEach&gt;map</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、相同点&quot;&gt;&lt;a href=&quot;#1、相同点&quot; class=&quot;headerlink&quot; title=&quot;1、相同点&quot;&gt;&lt;/a&gt;1、相同点&lt;/h2&gt;&lt;p&gt;1） 都是循环遍历数组中的每一项。&lt;/p&gt;
&lt;p&gt;2） 每次执行匿名函数都支持三个参数，参数分别为 item(当前每</summary>
      
    
    
    
    <category term="js基础" scheme="http://example.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>详解v-if和v-for不能同时使用</title>
    <link href="http://example.com/2022/11/24/%E8%AF%A6%E8%A7%A3v-if%E5%92%8Cv-for%E4%B8%8D%E8%83%BD%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/11/24/%E8%AF%A6%E8%A7%A3v-if%E5%92%8Cv-for%E4%B8%8D%E8%83%BD%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2022-11-24T04:43:10.000Z</published>
    <updated>2023-02-13T07:30:14.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Vue 官方文档中，明确说明了<code>不建议将v-for和v-if同时使用</code>。因为两者作用在同一个元素时，优先级是不同的。</p><ul><li><strong>在 vue2 中，v-for 的优先级更高</strong></li><li><strong>在 vue3 中，v-if 的优先级更高</strong></li></ul><h2 id="Vue2："><a href="#Vue2：" class="headerlink" title="Vue2："></a>Vue2：</h2><p>在 Vue2 中，v-for 的优先级是高于 v-if 的，如果作用在同一元素上，输出的渲染函数中会先执行循环再判断条件，哪怕只渲染列表中一小部分元素，也得在每次重渲染的时候[遍历]整个列表，这会造成性能的浪费</p><h2 id="Vue3："><a href="#Vue3：" class="headerlink" title="Vue3："></a>Vue3：</h2><p>而在 Vue3 中，v-if 的优先级时高于 v-for 的，因此 v-if 执行时要调用的变量可能还不存在，会导致报错。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>1.使用空标签 template，让 for 循环在 template 上面；</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> &gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;active&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        &lt;/div &gt;</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 Vue 官方文档中，明确说明了&lt;code&gt;不建议将v-for和v-if同时使用&lt;/code&gt;。因为两者作用在同一个元素时，优先级是不同的</summary>
      
    
    
    
    <category term="vue基础" scheme="http://example.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>基于原生实现拖拽排序</title>
    <link href="http://example.com/2022/11/24/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/11/24/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</id>
    <published>2022-11-24T01:35:56.000Z</published>
    <updated>2023-02-14T01:16:06.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ced3db63cfc44cc97bd41cc02ee1e6b~tplv-k3u1fbpfcp-watermark.image" alt="tz.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.list-item</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">32</span>, <span class="hljs-number">138</span>, <span class="hljs-number">191</span>, <span class="hljs-number">0.776</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.list-item</span><span class="hljs-selector-class">.moving</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: transparent;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: transparent;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dashed <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.list&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> node</span><br><span class="language-javascript">    list.<span class="hljs-property">ondragstart</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;moving&#x27;</span>);</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">      node = e.<span class="hljs-property">target</span>;</span><br><span class="language-javascript">      e.<span class="hljs-property">dataTransfer</span>.<span class="hljs-property">effectAllowed</span> = <span class="hljs-string">&#x27;move&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    list.<span class="hljs-property">ondragover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    list.<span class="hljs-property">ondragenter</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span> == list || e.<span class="hljs-property">target</span> == node) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> children = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(list.<span class="hljs-property">children</span>)</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> nodeIndex = children.<span class="hljs-title function_">indexOf</span>(node)</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> targetIndex = children.<span class="hljs-title function_">indexOf</span>(e.<span class="hljs-property">target</span>)</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (nodeIndex &lt; targetIndex) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 从上往下拖动</span></span><br><span class="language-javascript">        list.<span class="hljs-title function_">insertBefore</span>(node, e.<span class="hljs-property">target</span>.<span class="hljs-property">nextElementSibling</span>)</span><br><span class="language-javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 从下往上拖动</span></span><br><span class="language-javascript">        list.<span class="hljs-title function_">insertBefore</span>(node, e.<span class="hljs-property">target</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    list.<span class="hljs-property">ondragend</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">      e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;moving&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ced3d</summary>
      
    
    
    
    <category term="js基础" scheme="http://example.com/categories/js%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue中router和route的区别</title>
    <link href="http://example.com/2022/11/20/Vue%E4%B8%ADrouter%E5%92%8Croute%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/11/20/Vue%E4%B8%ADrouter%E5%92%8Croute%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-11-20T03:35:37.000Z</published>
    <updated>2023-02-13T07:30:01.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="router"><a href="#router" class="headerlink" title="router"></a><strong>router</strong></h2><p>router 是 VueRouter 的实例对象,也是一个全局的路由对象，里面有很多的属性和方法比如：</p><h4 id="router-push："><a href="#router-push：" class="headerlink" title="router.push："></a>router.push：</h4><p>跳转链接就可以用  <code>this.$router.push，和router-link跳转一样</code></p><h4 id="router-replace"><a href="#router-replace" class="headerlink" title="router.replace():"></a>router.replace():</h4><p>跟 router.push 作用是一样的，但是它不会向 history 添加新记录，而是跟它的方法名一样替换掉当前的 history 记录.</p><h4 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n):"></a>router.go(n):</h4><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，window.history.Go(n)</p><h2 id="route"><a href="#route" class="headerlink" title="route"></a><strong>route</strong></h2><p>route 是当前正在跳转的路由对象，可以从 route 里面获取 hash，name ，path，query，params， fullPath 等属性方法比如接受参数时使用<br><strong>this.$route.query.参数名 —- this.route.params.参数名</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;router&quot;&gt;&lt;a href=&quot;#router&quot; class=&quot;headerlink&quot; title=&quot;router&quot;&gt;&lt;/a&gt;&lt;strong&gt;router&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;router 是 VueRouter 的实例对象,也是一个全局的路由对象，</summary>
      
    
    
    
    <category term="vue基础" scheme="http://example.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
