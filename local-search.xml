<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue插槽的使用</title>
    <link href="/2022/12/12/vue%E6%8F%92%E6%A7%BD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/12/12/vue%E6%8F%92%E6%A7%BD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1、什么是插槽"><a href="#1、什么是插槽" class="headerlink" title="1、什么是插槽"></a>1、什么是插槽</h2><p>1、插槽就是在子组件中提供父组件一个占位符，用于用户填充任何自己所需求的模板代码，<br>2、插槽显不显示、怎样显示是由父组件来控制的，而插槽在哪里显示在什么位置就由子组件来进行控制<br>3、可以把插槽认为是组件封装期间，为用户预留的内容的占位符。</p><h2 id="2、什么时候使用插槽"><a href="#2、什么时候使用插槽" class="headerlink" title="2、什么时候使用插槽"></a>2、什么时候使用插槽</h2><p>当子组件被复用时，需要在特定的区域展示不同的需求内容</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><h3 id="3-1-匿名插槽（默认插槽）"><a href="#3-1-匿名插槽（默认插槽）" class="headerlink" title="3.1.匿名插槽（默认插槽）"></a>3.1.匿名插槽（默认插槽）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--父组件内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--子组件标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Category</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--子组件标签体内容，也就是需要插入的内容--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Category</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--子组件内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 在&lt;slot&gt;标签位置显示插入的内容--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-具名插槽"><a href="#3-2-具名插槽" class="headerlink" title="3.2.具名插槽"></a>3.2.具名插槽</h3><h4 id="需要使用多个插槽的时候，定义一个-name-属性，区分插槽对应的位置。"><a href="#需要使用多个插槽的时候，定义一个-name-属性，区分插槽对应的位置。" class="headerlink" title="需要使用多个插槽的时候，定义一个 name 属性，区分插槽对应的位置。"></a>需要使用多个插槽的时候，定义一个 name 属性，区分插槽对应的位置。</h4><!--父组件内容--><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Category</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Category</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--子组件内容--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span> slot标签，这个位置也可以写内容 <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-comment">&lt;!--   slot=&quot;center&quot;     对应    name=&quot;center&quot;   --&gt;</span><br><span class="hljs-comment">&lt;!--   slot=&quot;footer&quot;     对应    name=&quot;footer&quot;   --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-作用域插槽"><a href="#3-3-作用域插槽" class="headerlink" title="3.3.作用域插槽"></a>3.3.作用域插槽</h3><h4 id="当父组件需要用到子组件里的数据时，通过插槽传递数据。"><a href="#当父组件需要用到子组件里的数据时，通过插槽传递数据。" class="headerlink" title="当父组件需要用到子组件里的数据时，通过插槽传递数据。"></a>当父组件需要用到子组件里的数据时，通过插槽传递数据。</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!--父组件内容--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Category</span> &gt;</span></span><br><span class="language-xml">       <span class="hljs-comment">&lt;!--需要包裹一个template标签（必须），获取slot传递数据--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;link&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in scope.data&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Category</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--子组件内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--通过slot传递数据data--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>原型和原型链</title>
    <link href="/2022/11/27/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2022/11/27/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="原型"><a href="#原型" class="headerlink" title="原型:"></a>原型:</h3><p>每一个函数都有 prototype 属性 称之为原型，因为这个属性的只是一个对象，也称之为原型对象。</p><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ol><li>存放一些属性和方法</li><li>在 javascript 中实现继承<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50293b7d14d442d6b6c8534b253c3319~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ol><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链:"></a>原型链:</h3><p>对象身上都有<strong>proto</strong>属性，这个属性指向他的原型对象，原型对象也是对象，也有<strong>proto</strong>属性指向原型类型对象的原型对象，这样一层一层查找就形成了原型链</p><h6 id="每个函数-function-身上都有一个-prototype，即显式原型-属性"><a href="#每个函数-function-身上都有一个-prototype，即显式原型-属性" class="headerlink" title="每个函数 function 身上都有一个 prototype，即显式原型(属性)"></a><strong>每个函数 function 身上都有一个 prototype，即显式原型(属性)</strong></h6><h6 id="每个实例对象都有一个proto可称为隐式原型-属性"><a href="#每个实例对象都有一个proto可称为隐式原型-属性" class="headerlink" title="每个实例对象都有一个proto可称为隐式原型(属性)"></a><strong>每个实例对象都有一个</strong>proto<strong>可称为隐式原型(属性)</strong></h6><h6 id="实例对象的隐式原型等于它构造函数的显式原型"><a href="#实例对象的隐式原型等于它构造函数的显式原型" class="headerlink" title="实例对象的隐式原型等于它构造函数的显式原型"></a><strong>实例对象的隐式原型等于它构造函数的显式原型</strong></h6><p>我们通过 new 构造函创建的实例对象身上有<strong>proto</strong>属性，这个属性指向构造函数的 prototype 属性，对象身上<strong>proto</strong>和构造函数 prototype 是等价的</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76da80774d914234ba2d94b6f428316b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>防抖和节流</title>
    <link href="/2022/11/27/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/2022/11/27/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h3 id="1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次"><a href="#1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次" class="headerlink" title="1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次"></a>1、防抖：单位时间内，频繁触发事件，规定时间只执行最后一次</h3><h6 id="1-典型场景：搜索框的输入"><a href="#1-典型场景：搜索框的输入" class="headerlink" title="1.典型场景：搜索框的输入"></a>1.典型场景：搜索框的输入</h6><h6 id="2-代码思路：利用定时器，每次触发前清空之前的定时器重新开始"><a href="#2-代码思路：利用定时器，每次触发前清空之前的定时器重新开始" class="headerlink" title="2.代码思路：利用定时器，每次触发前清空之前的定时器重新开始"></a>2.代码思路：利用定时器，每次触发前清空之前的定时器重新开始</h6><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01c87c9c29bd4313b92853d16e0dc758~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="2、节流：单位时间内，频发触发事件，规定时间内只执行一次"><a href="#2、节流：单位时间内，频发触发事件，规定时间内只执行一次" class="headerlink" title="2、节流：单位时间内，频发触发事件，规定时间内只执行一次"></a>2、节流：单位时间内，频发触发事件，规定时间内只执行一次</h3><h6 id="1-典型场景：高频事件，快速点击，鼠标滑动，scroll-事件"><a href="#1-典型场景：高频事件，快速点击，鼠标滑动，scroll-事件" class="headerlink" title="1.典型场景：高频事件，快速点击，鼠标滑动，scroll 事件"></a>1.典型场景：高频事件，快速点击，鼠标滑动，scroll 事件</h6><h6 id="2-代码思路：利用定时器，等定时器执行完毕，才开启定时器"><a href="#2-代码思路：利用定时器，等定时器执行完毕，才开启定时器" class="headerlink" title="2.代码思路：利用定时器，等定时器执行完毕，才开启定时器"></a>2.代码思路：利用定时器，等定时器执行完毕，才开启定时器</h6><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea3fcd9ba408422eb51e1b27faa698ee~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>forEach和map的区别</title>
    <link href="/2022/11/25/forEach%E5%92%8Cmap%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/11/25/forEach%E5%92%8Cmap%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="1、相同点"><a href="#1、相同点" class="headerlink" title="1、相同点"></a>1、相同点</h2><p>1） 都是循环遍历数组中的每一项。</p><p>2） 每次执行匿名函数都支持三个参数，参数分别为 item(当前每一项)，index(索引值)，arr(原数组)。</p><p>3） 匿名函数中的 this 都是指向 window。</p><p>4）只能遍历数组。</p><h2 id="2、不同点"><a href="#2、不同点" class="headerlink" title="2、不同点"></a>2、不同点</h2><p>1） map()会分配内存空间存储新数组并返回，forEach()不会返回数据。</p><p>2） forEach()允许 callback 更改原始数组的元素，map()返回新的数组，map() 不会对空数组进行检测。</p><p>二、forEach 和 map 有相同值的区别<br>相同处：forEach 和 map 都相当于封装好的单层 for 循环，三个值都相同。</p><h2 id="不同处："><a href="#不同处：" class="headerlink" title="不同处："></a>不同处：</h2><p>1、forEach()方法没有返回值，而 map()方法有返回值。</p><p>2、forEach 遍历通常都是直接引入当前遍历数组的内存地址，生成的数组的值发生变化，当前遍历的数组对应的值也会发生变化。</p><p>3、map 遍历的后的数组通常都是生成一个新的数组，新的数组的值发生变化，当前遍历的数组值不会变化。</p><p>4、总的来说 map 的速度大于 forEach。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol><li><p>forEach 适合于你并不打算改变数据的时候。</p></li><li><p>map()适用于你要改变数据值的时候。不仅仅在于它更快，而且返回一个新的数组。这样的优点在于你可以使用复合(composition)(map(), filter(), reduce()等组合使用)。</p></li></ol><p>性能上来说 for&gt;forEach&gt;map</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>详解v-if和v-for不能同时使用</title>
    <link href="/2022/11/24/%E8%AF%A6%E8%A7%A3v-if%E5%92%8Cv-for%E4%B8%8D%E8%83%BD%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/11/24/%E8%AF%A6%E8%A7%A3v-if%E5%92%8Cv-for%E4%B8%8D%E8%83%BD%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Vue 官方文档中，明确说明了<code>不建议将v-for和v-if同时使用</code>。因为两者作用在同一个元素时，优先级是不同的。</p><ul><li><strong>在 vue2 中，v-for 的优先级更高</strong></li><li><strong>在 vue3 中，v-if 的优先级更高</strong></li></ul><h2 id="Vue2："><a href="#Vue2：" class="headerlink" title="Vue2："></a>Vue2：</h2><p>在 Vue2 中，v-for 的优先级是高于 v-if 的，如果作用在同一元素上，输出的渲染函数中会先执行循环再判断条件，哪怕只渲染列表中一小部分元素，也得在每次重渲染的时候[遍历]整个列表，这会造成性能的浪费</p><h2 id="Vue3："><a href="#Vue3：" class="headerlink" title="Vue3："></a>Vue3：</h2><p>而在 Vue3 中，v-if 的优先级时高于 v-for 的，因此 v-if 执行时要调用的变量可能还不存在，会导致报错。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>1.使用空标签 template，让 for 循环在 template 上面；</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> &gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;active&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        &lt;/div &gt;</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于原生实现拖拽排序</title>
    <link href="/2022/11/24/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/11/24/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ced3db63cfc44cc97bd41cc02ee1e6b~tplv-k3u1fbpfcp-watermark.image" alt="tz.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.list-item</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">32</span>, <span class="hljs-number">138</span>, <span class="hljs-number">191</span>, <span class="hljs-number">0.776</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.list-item</span><span class="hljs-selector-class">.moving</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: transparent;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: transparent;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dashed <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.list&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> node</span><br><span class="language-javascript">    list.<span class="hljs-property">ondragstart</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;moving&#x27;</span>);</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">      node = e.<span class="hljs-property">target</span>;</span><br><span class="language-javascript">      e.<span class="hljs-property">dataTransfer</span>.<span class="hljs-property">effectAllowed</span> = <span class="hljs-string">&#x27;move&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    list.<span class="hljs-property">ondragover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    list.<span class="hljs-property">ondragenter</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span> == list || e.<span class="hljs-property">target</span> == node) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> children = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(list.<span class="hljs-property">children</span>)</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> nodeIndex = children.<span class="hljs-title function_">indexOf</span>(node)</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> targetIndex = children.<span class="hljs-title function_">indexOf</span>(e.<span class="hljs-property">target</span>)</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (nodeIndex &lt; targetIndex) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 从上往下拖动</span></span><br><span class="language-javascript">        list.<span class="hljs-title function_">insertBefore</span>(node, e.<span class="hljs-property">target</span>.<span class="hljs-property">nextElementSibling</span>)</span><br><span class="language-javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 从下往上拖动</span></span><br><span class="language-javascript">        list.<span class="hljs-title function_">insertBefore</span>(node, e.<span class="hljs-property">target</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    list.<span class="hljs-property">ondragend</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">      e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;moving&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue中router和route的区别</title>
    <link href="/2022/11/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2022/11/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="router"><a href="#router" class="headerlink" title="router"></a><strong>router</strong></h2><p>router 是 VueRouter 的实例对象,也是一个全局的路由对象，里面有很多的属性和方法比如：</p><h4 id="router-push："><a href="#router-push：" class="headerlink" title="router.push："></a>router.push：</h4><p>跳转链接就可以用  <code>this.$router.push，和router-link跳转一样</code></p><h4 id="router-replace"><a href="#router-replace" class="headerlink" title="router.replace():"></a>router.replace():</h4><p>跟 router.push 作用是一样的，但是它不会向 history 添加新记录，而是跟它的方法名一样替换掉当前的 history 记录.</p><h4 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n):"></a>router.go(n):</h4><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，window.history.Go(n)</p><h2 id="route"><a href="#route" class="headerlink" title="route"></a><strong>route</strong></h2><p>route 是当前正在跳转的路由对象，可以从 route 里面获取 hash，name ，path，query，params， fullPath 等属性方法比如接受参数时使用<br><strong>this.$route.query.参数名 —- this.route.params.参数名</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
