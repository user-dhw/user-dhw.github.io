<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于原生实现拖拽排序</title>
    <link href="/2022/11/24/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/11/24/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89d94bbfdebf4f72b1312bb1f1e84556~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="话不多说直接上代码"><a href="#话不多说直接上代码" class="headerlink" title="话不多说直接上代码"></a>话不多说直接上代码</h2><p>&#96;</p><style>  .list-item {    width: 300px;    height: 30px;    margin: 20px;    text-align: center;    line-height: 30px;    border-radius: 5px;    background: rgba(32, 138, 191, 0.776);  }  .list-item.moving {    background: transparent;    color: transparent;    border: 1px dashed #ccc;  }</style>  <div class="list">    <div draggable="true" class="list-item">1</div>    <div draggable="true" class="list-item">2</div>    <div draggable="true" class="list-item">3</div>    <div draggable="true" class="list-item">4</div>    <div draggable="true" class="list-item">5</div>  </div>  <script>    const list = document.querySelector('.list');    let node    list.ondragstart = function (e) {      setTimeout(() => {        e.target.classList.add('moving');      })      node = e.target;      e.dataTransfer.effectAllowed = 'move';    }    list.ondragover = function (e) {      e.preventDefault();    }    list.ondragenter = function (e) {      e.preventDefault();      if (e.target == list || e.target == node) {        return      }      const children = Array.from(list.children)      const nodeIndex = children.indexOf(node)      const targetIndex = children.indexOf(e.target)      if (nodeIndex < targetIndex) {        // 从上往下拖动        list.insertBefore(node, e.target.nextElementSibling)      } else {        // 从下往上拖动        list.insertBefore(node, e.target)      }    }    list.ondragend = (e) => {      e.target.classList.remove('moving');    }  </script>`]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue中router和route的区别</title>
    <link href="/2022/11/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2022/11/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="router"><a href="#router" class="headerlink" title="router"></a><strong>router</strong></h2><p>router 是 VueRouter 的实例对象,也是一个全局的路由对象，里面有很多的属性和方法比如：</p><h4 id="router-push："><a href="#router-push：" class="headerlink" title="router.push："></a>router.push：</h4><p>跳转链接就可以用  <code>this.$router.push，和router-link跳转一样</code></p><h4 id="router-replace"><a href="#router-replace" class="headerlink" title="router.replace():"></a>router.replace():</h4><p>跟 router.push 作用是一样的，但是它不会向 history 添加新记录，而是跟它的方法名一样替换掉当前的 history 记录.</p><h4 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n):"></a>router.go(n):</h4><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，window.history.Go(n)</p><h2 id="route"><a href="#route" class="headerlink" title="route"></a><strong>route</strong></h2><p>route 是当前正在跳转的路由对象，可以从 route 里面获取 hash，name ，path，query，params， fullPath 等属性方法比如接受参数时使用<br><strong>this.$route.query.参数名 —- this.route.params.参数名</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
